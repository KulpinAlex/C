#include <limits.h>
#include <stdio.h>

#include "../s21_add.h"
#include "../s21_another_functions.h"
#include "../s21_comparison.h"
#include "../s21_decimal.h"
#include "../s21_mul.h"

#define VALUE_TRUE 1
#define VALUE_FALSE 0
#define VALUE_OK 0
#define VALUE_ERROR 1
#define VALUE_INF 1
#define VALUE_MINUS_INF 2
#define VALUE_NAN 3

#test s21_neg_infinity
s21_decimal a = {0};
s21_decimal b = {0};
s21_decimal res = {0};
SetBitFromUInt(&a.bits[3], 1, 31);
SetBitFromUInt(&b.bits[3], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 30);
SetBitFromUInt(&b.bits[2], 1, 31);
SetBitFromUInt(&b.bits[2], 1, 30);
int code = s21_add(a, b, &res);
ck_assert_int_eq(code, 2);

#test s21_plus_infinity
s21_decimal a = {0};
s21_decimal b = {0};
s21_decimal res = {0};

SetBitFromUInt(&a.bits[2], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 30);
SetBitFromUInt(&b.bits[2], 1, 31);
SetBitFromUInt(&b.bits[2], 1, 30);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 1);

#test s21_neg_infinity_sub
s21_decimal a = {0};
s21_decimal b = {0};
s21_decimal res = {0};

SetBitFromUInt(&a.bits[3], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 30);
SetBitFromUInt(&b.bits[2], 1, 31);
SetBitFromUInt(&b.bits[2], 1, 30);
int code = s21_sub(a, b, &res);
ck_assert_int_eq(code, 2);

#test s21_plus_infinity_sub
s21_decimal a = {0};
s21_decimal b = {0};
s21_decimal res = {0};

SetBitFromUInt(&b.bits[3], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 31);
SetBitFromUInt(&a.bits[2], 1, 30);
SetBitFromUInt(&b.bits[2], 1, 31);
SetBitFromUInt(&b.bits[2], 1, 30);
int code = s21_sub(a, b, &res);

ck_assert_int_eq(code, 1);

#test s21_big_exp
s21_decimal a = {0};
s21_decimal b = {0};
s21_decimal res = {0};

set_exponent(&b.bits[3], 30);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 2);

#test add1
s21_decimal a = {7, 0, 0, 0};
s21_decimal b = {15, 0, 0, 0};
s21_decimal res = {0};

int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 22);

#test sub1
s21_decimal a = {7, 0, 0, 0};
s21_decimal b = {15, 0, 0, 0};
s21_decimal res = {0};

int code = s21_sub(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 8);
ck_assert_int_eq(GetBitFromUInt(res.bits[3], 31), 1);

#test add2
s21_decimal a = {7, 0, 0, 0};
s21_decimal b = {15, 0, 0, 0};
s21_decimal res = {0};
set_exponent(&b.bits[3], 1);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 85);

#test add3
s21_decimal a = {105, 0, 0, 0};
s21_decimal b = {15, 0, 0, 0};
s21_decimal res = {0};
set_exponent(&a.bits[3], 1);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 255);

#test add4
s21_decimal a = {0, 0, 0, 0};
s21_decimal b = {0, 0, 0, 0};
s21_decimal res = {0};

SetBitFromUInt(&b.bits[3], 1, 31);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 0);
ck_assert_int_eq(res.bits[3], 0);

#test add5
s21_decimal a = {35, 0, 0, 0};
s21_decimal b = {20, 0, 0, 0};
s21_decimal res = {0};

SetBitFromUInt(&b.bits[3], 1, 31);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 15);
ck_assert_int_eq(res.bits[3], 0);

#test add6
s21_decimal a = {2147483647, 2147483647, 2147483647, 0};
s21_decimal b = {2147483647, 2147483647, 0, 0};
s21_decimal res = {0};

set_exponent(&a.bits[3], 25);
int code = s21_add(a, b, &res);

ck_assert_int_eq(code, 0);

#test s21_from_float_to_decimal_1
s21_decimal dec;
int err = s21_from_float_to_decimal(+0.0, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_2
s21_decimal dec;
int err = s21_from_float_to_decimal(-0.0, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], pow(2, 31));
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_3
s21_decimal dec;
int err = s21_from_float_to_decimal(1e-28, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 1);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b00000000000111000000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_4
s21_decimal dec;
int err = s21_from_float_to_decimal(pow(2, 23), &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], pow(2, 23));
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_5
s21_decimal dec;
int err = s21_from_float_to_decimal(-pow(2, 23), &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0b100000000000000000000000);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], pow(2, 31));
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_6
s21_decimal dec;
int err = s21_from_float_to_decimal(+INFINITY, &dec);
ck_assert_int_eq(err, 1);
ck_assert_int_eq(dec.value_type, 1);

#test s21_from_float_to_decimal_7
s21_decimal dec;
int err = s21_from_float_to_decimal(-INFINITY, &dec);
ck_assert_int_eq(err, 1);
ck_assert_int_eq(dec.value_type, 1);

#test s21_from_float_to_decimal_8
s21_decimal dec;
int err = s21_from_float_to_decimal(+NAN, &dec);
ck_assert_int_eq(err, 1);
ck_assert_int_eq(dec.value_type, 2);

#test s21_from_float_to_decimal_9
s21_decimal dec;
int err = s21_from_float_to_decimal(-NAN, &dec);
ck_assert_int_eq(err, 1);
ck_assert_int_eq(dec.value_type, 2);

#test s21_from_float_to_decimal_10
s21_decimal dec;
int err = s21_from_float_to_decimal(0.9e-28, &dec);
ck_assert_int_eq(err, 1);

#test s21_from_float_to_decimal_11
s21_decimal dec;
int err = s21_from_float_to_decimal(FLT_MAX, &dec);
ck_assert_int_eq(err, 1);

#test s21_from_float_to_decimal_12
s21_decimal dec;
int err = s21_from_float_to_decimal(155.625, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0b0100101111111101001);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b00000000000000110000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_13
s21_decimal dec;
int err = s21_from_float_to_decimal(-155.625, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0b0100101111111101001);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b10000000000000110000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_14
s21_decimal dec;
int err = s21_from_float_to_decimal(1e10, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0b01010100000010111110010000000000);
ck_assert_int_eq(dec.bits[1], 0b00000000000000000000000000000010);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b00000000000000000000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_15
s21_decimal dec;
int err = s21_from_float_to_decimal(1e20, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0b01100011000100000000000000000000);
ck_assert_int_eq(dec.bits[1], 0b01101011110001110101111000101101);
ck_assert_int_eq(dec.bits[2], 0b00000000000000000000000000000101);
ck_assert_int_eq(dec.bits[3], 0b00000000000000000000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_float_to_decimal_16
s21_decimal dec;
int err = s21_from_float_to_decimal(1.1e-28, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 1);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b00000000000111000000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_decimal_to_float_1
s21_decimal dec;
Init_s21_decimal(&dec);
float correct = 0.0;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
char correct_str[20];
char result_str[20];
snprintf(correct_str, sizeof(correct_str), "%.6e", correct);
snprintf(result_str, sizeof(result_str), "%.6e", res);
ck_assert_str_eq(result_str, correct_str);

#test s21_from_decimal_to_float_2
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 1;
dec.bits[1] = 0;
dec.bits[2] = 0;
dec.bits[3] = 0b00000000000111000000000000000000;
float correct = 1e-28;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
char correct_str[20];
char result_str[20];
snprintf(correct_str, sizeof(correct_str), "%.6e", correct);
snprintf(result_str, sizeof(result_str), "%.6e", res);
ck_assert_str_eq(result_str, correct_str);

#test s21_from_decimal_to_float_3
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 0b0100101111111101001;
dec.bits[1] = 0;
dec.bits[2] = 0;
dec.bits[3] = 0b10000000000000110000000000000000;
float correct = -155.625;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
char correct_str[20];
char result_str[20];
snprintf(correct_str, sizeof(correct_str), "%.6e", correct);
snprintf(result_str, sizeof(result_str), "%.6e", res);
ck_assert_str_eq(result_str, correct_str);

#test s21_from_decimal_to_float_4
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 0b01010100000010111110010000000000;
dec.bits[1] = 0b00000000000000000000000000000010;
dec.bits[2] = 0;
dec.bits[3] = 0b00000000000000000000000000000000;
float correct = 1e10;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
char correct_str[20];
char result_str[20];
snprintf(correct_str, sizeof(correct_str), "%.6e", correct);
snprintf(result_str, sizeof(result_str), "%.6e", res);
ck_assert_str_eq(result_str, correct_str);

#test s21_from_decimal_to_float_5
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 0b01100011000100000000000000000000;
dec.bits[1] = 0b01101011110001110101111000101101;
dec.bits[2] = 0b00000000000000000000000000000101;
dec.bits[3] = 0b00000000000000000000000000000000;
float correct = 1e20;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
char correct_str[20];
char result_str[20];
snprintf(correct_str, sizeof(correct_str), "%.6e", correct);
snprintf(result_str, sizeof(result_str), "%.6e", res);
ck_assert_str_eq(result_str, correct_str);

#test s21_from_decimal_to_float_6
s21_decimal dec;
Init_s21_decimal(&dec);
dec.value_type = 1;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
ck_assert_int_eq(err, 1);

#test s21_from_decimal_to_float_7
s21_decimal dec;
Init_s21_decimal(&dec);
dec.value_type = 2;
float res = 0.0;
int err = s21_from_decimal_to_float(dec, &res);
ck_assert_int_eq(err, 1);

#test s21_from_int_to_decimal_1
s21_decimal dec;
int err = s21_from_int_to_decimal(0, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 0);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_int_to_decimal_2
s21_decimal dec;
int err = s21_from_int_to_decimal(1234567890, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 1234567890);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_int_to_decimal_3
s21_decimal dec;
int err = s21_from_int_to_decimal(-1234567890, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 1234567890);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b10000000000000000000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_int_to_decimal_4
s21_decimal dec;
int err = s21_from_int_to_decimal(-2147483648, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 2147483648);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0b10000000000000000000000000000000);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_int_to_decimal_5
s21_decimal dec;
int err = s21_from_int_to_decimal(2147483647, &dec);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(dec.bits[0], 2147483647);
ck_assert_int_eq(dec.bits[1], 0);
ck_assert_int_eq(dec.bits[2], 0);
ck_assert_int_eq(dec.bits[3], 0);
ck_assert_int_eq(dec.value_type, 0);

#test s21_from_decimal_to_int_1
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 0;
int res = 0;
int err = s21_from_decimal_to_int(dec, &res);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(res, 0);

#test s21_from_decimal_to_int_2
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 2147483647u;
int res = 0;
int err = s21_from_decimal_to_int(dec, &res);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(res, 2147483647);

#test s21_from_decimal_to_int_3
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 2147483648u;
int res = 0;
int err = s21_from_decimal_to_int(dec, &res);
ck_assert_int_eq(err, 1);

#test s21_from_decimal_to_int_4
s21_decimal dec;
Init_s21_decimal(&dec);
dec.bits[0] = 2147483648u;
dec.bits[3] = 0b10000000000000000000000000000000;
int res = 0;
int err = s21_from_decimal_to_int(dec, &res);
ck_assert_int_eq(err, 0);
ck_assert_int_eq(res, -2147483648);

#test s21_add_1
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;

src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);
//
#test s21_add_2
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 3;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_3
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_4
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_5
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -0.0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000011110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000010000000000000000;
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_6
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_7
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 6521;
// src2 = 74121;
src1.bits[0] = 0b00000000000000000001100101111001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000010010000110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000010011101100000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_8
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 4;
// src2 = 97623323;
src1.bits[0] = 0b00000000000000000000000000000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000101110100011001110100011011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000101110100011001110100011111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_9
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 65658654;
// src2 = 5;
src1.bits[0] = 0b00000011111010011101111100011110;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000011111010011101111100100011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_10
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000001011001000011001011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_11
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 98745654321;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111101101100110001110000110001;
src2.bits[1] = 0b00000000000000000000000000010110;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111101101100110001110000110010;
origin.bits[1] = 0b00000000000000000000000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_12
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -9878798789;
// src2 = -3;
src1.bits[0] = 0b01001100110100101000000111000101;
src1.bits[1] = 0b00000000000000000000000000000010;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01001100110100101000000111001000;
origin.bits[1] = 0b00000000000000000000000000000010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_13
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001001111010000000000000000000;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_14
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000001;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_15
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00111111011101000111010111001010;
origin.bits[1] = 0b00000000000000000000000000000010;
origin.bits[2] = 0b00000000000000000000000000001010;
origin.bits[3] = 0b00000000000000010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_16
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -545454512454545.35265454545645;
// src2 = 54564654;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b00000011010000001001011100101110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01110001001010101101101011101101;
origin.bits[1] = 0b00101110001111001110000111111000;
origin.bits[2] = 0b10110000001111101110111101101101;
origin.bits[3] = 0b10000000000011100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_17
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 =   -545454512454545.352654545456450000000000;
// src2 =                 -5.352654545456454545645464;
// result = -545454512454550.705309090912904545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10110110001010011011010111011010;
origin.bits[1] = 0b11111001111010100000110001111111;
origin.bits[2] = 0b10110000001111101111000010010100;
origin.bits[3] = 0b10000000000011100000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_18
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7961327845421.879754123131254;
// src2 = 0;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01001110111001000011100101110110;
origin.bits[1] = 0b01001011001101011010000111011001;
origin.bits[2] = 0b00011001101110010111010010111111;
origin.bits[3] = 0b00000000000011110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_19
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11010010000011011110010110111111;
origin.bits[1] = 0b10100111010011100111001000100001;
origin.bits[2] = 0b00011100010100111001110111101101;
origin.bits[3] = 0b00000000000100010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_20
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10010010000001100111100010100101;
origin.bits[1] = 0b10001011011010100100100011011111;
origin.bits[2] = 0b00011100010100011001001100010001;
origin.bits[3] = 0b00000000000100010000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_21
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10010010000001100111100010100101;
origin.bits[1] = 0b10001011011010100100100011011111;
origin.bits[2] = 0b00011100010100011001001100010001;
origin.bits[3] = 0b10000000000100010000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_22
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11010010000011011110010110111111;
origin.bits[1] = 0b10100111010011100111001000100001;
origin.bits[2] = 0b00011100010100111001110111101101;
origin.bits[3] = 0b10000000000100010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_23
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_24
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_25
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_26
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = -1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_27
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7922816251427554395;
// src2 = 65645646;
src1.bits[0] = 0b01011111000010000000010001011011;
src1.bits[1] = 0b01101101111100110111111101100111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000011111010011010110001001110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01100010111100011011000010101001;
origin.bits[1] = 0b01101101111100110111111101100111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_28
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00110111111111010001010100111010;
origin.bits[1] = 0b00000000000111110100000111110010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_29
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2.7986531268974139743;
// src2 = 9.979623121254565121244554;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11010100101011100011110110001010;
src2.bits[1] = 0b01110100000101000010011110100011;
src2.bits[2] = 0b00000000000010000100000101000100;
src2.bits[3] = 0b00000000000110000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10011010010111001101001011101010;
origin.bits[1] = 0b10111110010100100100110100010011;
origin.bits[2] = 0b00000000000010101001000111100111;
origin.bits[3] = 0b00000000000110000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_30
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -9798956154578676.797564534156;
// src2 = -2156878451.854764;
src1.bits[0] = 0b01010100010000000011110110001100;
src1.bits[1] = 0b10001011010100100000010101011001;
src1.bits[2] = 0b00011111101010011000000110101101;
src1.bits[3] = 0b10000000000011000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11010101111011100000000010001100;
origin.bits[1] = 0b01111000000001011001100110101101;
origin.bits[2] = 0b00011111101010011000001000100010;
origin.bits[3] = 0b10000000000011000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_31
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 0.68985125146545154;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b00010111001001010100110000000010;
src2.bits[1] = 0b00000000111101010001010110011011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000100010000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01110000110111010100000010001101;
origin.bits[1] = 0b01011010100111011110001100001010;
origin.bits[2] = 0b00100111111010111100110001011010;
origin.bits[3] = 0b00000000000111000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_32
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -0.77545545454546589781;
// src2 = 87894515154546456456;
src1.bits[0] = 0b10101100001010000001100001010101;
src1.bits[1] = 0b00110100001010010001111010111100;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000101000000000000000000;
src2.bits[0] = 0b00010011111011011111011110001000;
src2.bits[1] = 0b11000011110010000000101111011001;
src2.bits[2] = 0b00000000000000000000000000000100;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10101111000101110100011110110111;
origin.bits[1] = 0b01100110100011011000001100010111;
origin.bits[2] = 0b00011100011001100111011011000001;
origin.bits[3] = 0b00000000000010000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_33
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_34
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 32323465788987654;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b01011000010000110001100100000110;
src1.bits[1] = 0b00000000011100101101011000000101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10000110010000000000000011011011;
origin.bits[1] = 0b00110010000100100110010100111000;
origin.bits[2] = 0b01101000011100010101100000100011;
origin.bits[3] = 0b00000000000011000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_35
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -784515454.7989898652154545652;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b10110001001110110100010111110100;
src1.bits[1] = 0b00111000100000111010110010000001;
src1.bits[2] = 0b00011001010110010101110000011000;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10011111111011011000101110000011;
origin.bits[1] = 0b01111001100101101100001110101010;
origin.bits[2] = 0b10111011010111111101000100100010;
origin.bits[3] = 0b10000000000010110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_36
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = -37986322154988653.784354545765;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01001111101101000110000001100101;
src2.bits[1] = 0b01000010001101101011011001100001;
src2.bits[2] = 0b01111010101111011000110010011010;
src2.bits[3] = 0b10000000000011000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01001111101101000110000001100101;
origin.bits[1] = 0b01000010001101101011011001100001;
origin.bits[2] = 0b01111010101111011000110010011010;
origin.bits[3] = 0b10000000000011000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_37
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_38
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_39
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -79228162514264337593543950335;
// src2 = -1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;

src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 2;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_40
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_44
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 546378;
// src2 = 0;
src1.bits[0] = 0b00000000000010000101011001001010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000010000101011001001010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_45
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 8976545415646545.5746845454;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11011101111000010000101100001110;
src2.bits[1] = 0b00000101010000010110101000000010;
src2.bits[2] = 0b00000000010010100100000010010011;
src2.bits[3] = 0b00000000000010100000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11011101111000010000101100001110;
origin.bits[1] = 0b00000101010000010110101000000010;
origin.bits[2] = 0b00000000010010100100000010010011;
origin.bits[3] = 0b00000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_49
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0;
// src2 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_50
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000001010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_51
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_add_52
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_add(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_1
s21_decimal src1 = {0}, src2 = {0}, origin = {0}, result = {0};
int value_type_result = 0, value_type_origin = 0;
// src1 = 5;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_2
s21_decimal src1 = {0}, src2 = {0}, origin = {0}, result = {0};
int value_type_result = 0, value_type_origin = 0;
// src1 = 3;
// src2 = 6;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_3
s21_decimal src1 = {0}, src2 = {0}, origin = {0}, result = {0};
int value_type_result = 0, value_type_origin = 0;
// src1 = 0;
// src2 = 8;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000001000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_4
s21_decimal src1 = {0}, src2 = {0}, origin = {0}, result = {0};
int value_type_result = 0, value_type_origin = 0;
// src1 = 7;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_5
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0;
// src2 = 5;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000110010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_6
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 3;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_7
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 787891;
// src2 = 238471;
src1.bits[0] = 0b00000000000011000000010110110011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000111010001110000111;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000010000110001000101100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_8
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9;
// src2 = 18571145;
src1.bits[0] = 0b00000000000000000000000000001001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000001000110110101111110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001000110110101111110000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_9
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1849687;
// src2 = 6;
src1.bits[0] = 0b00000000000111000011100101010111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000111000011100101010001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_10
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -3187878;
// src2 = 1;
src1.bits[0] = 0b00000000001100001010010010100110;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000001100001010010010100111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_11
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 18768768;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000001000111100110001110000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001000111100110001101111111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_12
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -2168564564;
// src2 = -9;
src1.bits[0] = 0b10000001010000011010101101010100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10000001010000011010101101001011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_13
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001001111001111111111111111110;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_14
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_15
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615.0;
// src2 = 3556877454;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11010100000000011010010010001110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10110111111011111001001001101010;
origin.bits[1] = 0b11111111111111111111111111110111;
origin.bits[2] = 0b00000000000000000000000000001001;
origin.bits[3] = 0b00000000000000010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_16
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -54896651557845.352654545456455;
// src2 = 21465;
src1.bits[0] = 0b01110001100100011000110101000111;
src1.bits[1] = 0b00001111010011100000001101011111;
src1.bits[2] = 0b10110001011000010111001000100100;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000101001111011001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01111001010101000000110101000111;
origin.bits[1] = 0b00111001001100010000001100100101;
origin.bits[2] = 0b10110001011000010111001000100101;
origin.bits[3] = 0b10000000000011110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_17
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7961327845421.879754123131254;
// src2 = 0;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01001110111001000011100101110110;
origin.bits[1] = 0b01001011001101011010000111011001;
origin.bits[2] = 0b00011001101110010111010010111111;
origin.bits[3] = 0b00000000000011110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_19
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11010010000011011110010110111111;
origin.bits[1] = 0b10100111010011100111001000100001;
origin.bits[2] = 0b00011100010100111001110111101101;
origin.bits[3] = 0b10000000000100010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_20
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11010010000011011110010110111111;
origin.bits[1] = 0b10100111010011100111001000100001;
origin.bits[2] = 0b00011100010100111001110111101101;
origin.bits[3] = 0b00000000000100010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_21
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 =   -   12345677.987654345678987654346;
// src2 =   -87654323456.987654567898765300000;
// result =  87641977779.000000222219777645654
// Decimal a3 :  87641977779.00000022221977764
// Decimal Sum : 87641977779.00000022221977765
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10010010000001100111100010100101;
origin.bits[1] = 0b10001011011010100100100011011111;
origin.bits[2] = 0b00011100010100011001001100010001;
origin.bits[3] = 0b00000000000100010000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_22
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_23
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_24
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_25
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_26
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7922816251427554395;
// src2 = 65645646;
src1.bits[0] = 0b01011111000010000000010001011011;
src1.bits[1] = 0b01101101111100110111111101100111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000011111010011010110001001110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01011011000111100101100000001101;
origin.bits[1] = 0b01101101111100110111111101100111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_27
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11101000101010001011011101111000;
origin.bits[1] = 0b00000000000111110100000111110001;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_28
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2.7986531268974139743;
// src2 = 9.979623121254565121244554;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11010100101011100011110110001010;
src2.bits[1] = 0b01110100000101000010011110100011;
src2.bits[2] = 0b00000000000010000100000101000100;
src2.bits[3] = 0b00000000000110000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00001110111111111010100000101010;
origin.bits[1] = 0b00101001110101100000001000110100;
origin.bits[2] = 0b00000000000001011111000010100001;
origin.bits[3] = 0b10000000000110000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_29
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -9798956154578676.797564534156;
// src2 = -2156878451.854764;
src1.bits[0] = 0b01010100010000000011110110001100;
src1.bits[1] = 0b10001011010100100000010101011001;
src1.bits[2] = 0b00011111101010011000000110101101;
src1.bits[3] = 0b10000000000011000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11010010100100100111101010001100;
origin.bits[1] = 0b10011110100111100111000100000100;
origin.bits[2] = 0b00011111101010011000000100111000;
origin.bits[3] = 0b10000000000011000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_30
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 0.68985125146545154;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b00010111001001010100110000000010;
src2.bits[1] = 0b00000000111101010001010110011011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000100010000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01011010101111100101111101110011;
origin.bits[1] = 0b00101101001111010011000001101000;
origin.bits[2] = 0b00000100101010001101010101010111;
origin.bits[3] = 0b10000000000111000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_32
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -1;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_33
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 32323465788987654;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b01011000010000110001100100000110;
src1.bits[1] = 0b00000000011100101101011000000101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00001110100111001011111100100101;
origin.bits[1] = 0b11011111010111101000100010100000;
origin.bits[2] = 0b01101000011100010101100000011011;
origin.bits[3] = 0b00000000000011000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_34
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -784515454.7989898652154545652;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b10110001001110110100010111110100;
src1.bits[1] = 0b00111000100000111010110010000001;
src1.bits[2] = 0b00011001010110010101110000011000;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00101100010111011001101101001111;
origin.bits[1] = 0b11111000000111110000000110111111;
origin.bits[2] = 0b10111011010111111101000100011001;
origin.bits[3] = 0b00000000000010110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_35
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = -37986322154988653.784354545765;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01001111101101000110000001100101;
src2.bits[1] = 0b01000010001101101011011001100001;
src2.bits[2] = 0b01111010101111011000110010011010;
src2.bits[3] = 0b10000000000011000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01001111101101000110000001100101;
origin.bits[1] = 0b01000010001101101011011001100001;
origin.bits[2] = 0b01111010101111011000110010011010;
origin.bits[3] = 0b00000000000011000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_36
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162513351883030198514100;
// src2 = -912454563345436235;
src1.bits[0] = 0b10110110000111000111000110110100;
src1.bits[1] = 0b11110011010101100100111101101000;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01001001111000111000111001001011;
src2.bits[1] = 0b00001100101010011011000010010111;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_37
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 59978456487987764548465456454;
// src2 = -48786756456875658915646545165;
src1.bits[0] = 0b00011111001111011111010101000110;
src1.bits[1] = 0b01010100100001101100100010110010;
src1.bits[2] = 0b11000001110011010000010000110001;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01100000001001000001110100001101;
src2.bits[1] = 0b11110100000010101101000010000000;
src2.bits[2] = 0b10011101101000110111010110000110;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_38
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 59978456487987764548465456454;
// src2 = -48786756456875658915646545165;
src1.bits[0] = 0b00011111001111011111010101000110;
src1.bits[1] = 0b01010100100001101100100010110010;
src1.bits[2] = 0b11000001110011010000010000110001;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01100000001001000001110100001101;
src2.bits[1] = 0b11110100000010101101000010000000;
src2.bits[2] = 0b10011101101000110111010110000110;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_39
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_48
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0;
// src2 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_49
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000001010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_50
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0;
// src2 = 1;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000001010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_51
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_52
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 1;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_sub_53
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_sub(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_equal_1
s21_decimal first = {{4412, 5675, 1254, 0b00000100000000000010000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b00000100000000000010000000000000}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test s21_equal_2
s21_decimal first = {{4412, 5675, 1254, 0b10000100000000000010000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b10000100000000000010000000000000}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test s21_equal_3_fraction
s21_decimal first = {{4412, 5675, 1254, 0b10110010000000001110000111000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11001001000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test s21_equal_4_sign
s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b01110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_5_sign
s21_decimal first = {{4412, 5675, 1254, 0b00110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_6
s21_decimal first = {{4412, 5675, 1154, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_7
s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1244, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_8
s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 12541, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_9_ss
s21_decimal first = {{0x4A1D, 05675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {
    {0x4A1D, 05675, 1254, 0b10110100111111110010000000000011}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test s21_equal_10
s21_decimal first = {{412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_11_zero
s21_decimal first = {{0, 0, 0, 0b11110100000000000010000111111110}};
s21_decimal second = {{0, 0, 0, 0b01110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 1);

#test s21_equal_12_value
s21_decimal first = {
    {1564, 31452, 6109410, 0b11110100000000000010000111111110}};
s21_decimal second = {
    {1564, 31452, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_13_value
s21_decimal first = {{1564, 31452, 610941, 0b11110100000000000010000111111110}};
s21_decimal second = {{1564, 3142, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_14_value
s21_decimal first = {
    {15614, 31452, 610941, 0b11110100000000000010000111111110}};
s21_decimal second = {
    {1564, 31452, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_equal(first, second), 0);

#test s21_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_16
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_17
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_18
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_19
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_20
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_21
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000000000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010000000000000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_22
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_26
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_28
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_29
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_30
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_31
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_32
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_33
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_34
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_35
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_36
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_37
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_38
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_39
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_40
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_41
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_42
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_43
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_44
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_45
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 5.4564654654864768465454654846;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01101110100110100110010101111110;
src2.bits[1] = 0b11100010111000110111110100101010;
src2.bits[2] = 0b10110000010011101101001100001111;
src2.bits[3] = 0b00000000000111000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_46
s21_decimal src1, src2;
int origin;
// src1 = -7.7545545454546589781677545545;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b00000101101101111001100001001001;
src1.bits[1] = 0b01101011011011011010110110010010;
src1.bits[2] = 0b11111010100100000010101111111010;
src1.bits[3] = 0b10000000000111000000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_47
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_48
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_49
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_50
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_51
s21_decimal src1, src2;
int origin;
// src1 = 44073709551615.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b00011010000001000111111111110110;
src1.bits[1] = 0b00000000000000011001000011011001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_52
s21_decimal src1, src2;
int origin;
// src1 = 228162514264337.5935439503;
// src2 = 228162514264337.59354395030000;
src1.bits[0] = 0b01010010111101011100001010001111;
src1.bits[1] = 0b00100101100101100010101000001101;
src1.bits[2] = 0b00000000000000011110001100100111;
src1.bits[3] = 0b00000000000010100000000000000000;
src2.bits[0] = 0b10011111111111111111000111110000;
src2.bits[1] = 0b00111001110010101010100001111000;
src2.bits[2] = 0b01001001101110010010100100101100;
src2.bits[3] = 0b00000000000011100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_53
s21_decimal src1, src2;
int origin;
// src1 = -754554545454658.97816770;
// src2 = -754554545454658.9781677;
src1.bits[0] = 0b00100000101101101001001011000010;
src1.bits[1] = 0b01110010110010011000000011111000;
src1.bits[2] = 0b00000000000000000000111111111010;
src1.bits[3] = 0b10000000000010000000000000000000;
src2.bits[0] = 0b10011100110111110000111010101101;
src2.bits[1] = 0b00001011011110101000110011100101;
src2.bits[2] = 0b00000000000000000000000110011001;
src2.bits[3] = 0b10000000000001110000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_54
s21_decimal src1, src2;
int origin;
// src1 = -2.514264337593543;
// src2 = -2.5142643375935430000000000000;
src1.bits[0] = 0b11001000101101101011010011000111;
src1.bits[1] = 0b00000000000010001110111010110101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b01010011100110100110000000000000;
src2.bits[1] = 0b10000010110010001001101110001011;
src2.bits[2] = 0b01010001001111011000000111010100;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_1_1
s21_decimal first = {{4412, 5675, 1254, 0b00000100000000000010000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b00000100000000000010000000000000}};
ck_assert_int_eq(s21_is_not_equal(first, second), 0);

#test s21_not_equal_2_1
s21_decimal first = {{4412, 5675, 1254, 0b10000100000000000010000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b10000100000000000010000000000000}};
ck_assert_int_eq(s21_is_not_equal(first, second), 0);

#test s21_not_equal_3_fraction_1
s21_decimal first = {{4412, 5675, 1254, 0b10110010000000001110000111000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11001001000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 0);

#test s21_not_equal_4_sign_1
s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b01110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_5_sign_1
s21_decimal first = {{4412, 5675, 1254, 0b00110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_6_1
s21_decimal first = {{4412, 5675, 1154, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_7_1
s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1244, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_8_1
s21_decimal first = {{4412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 12541, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_9_ss_1
s21_decimal first = {{0x4A1D, 05675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {
    {0x4A1D, 05675, 1254, 0b10110100111111110010000000000011}};
ck_assert_int_eq(s21_is_not_equal(first, second), 0);

#test s21_not_equal_10_1
s21_decimal first = {{412, 5675, 1254, 0b10110100111111110010000000000011}};
s21_decimal second = {{4412, 5675, 1254, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_11_zero_1
s21_decimal first = {{0, 0, 0, 0b11110100000000000010000111111110}};
s21_decimal second = {{0, 0, 0, 0b01110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 0);

#test s21_not_equal_12_value_1
s21_decimal first = {
    {1564, 31452, 6109410, 0b11110100000000000010000111111110}};
s21_decimal second = {
    {1564, 31452, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_13_value_1
s21_decimal first = {{1564, 31452, 610941, 0b11110100000000000010000111111110}};
s21_decimal second = {{1564, 3142, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_14_value_1
s21_decimal first = {
    {15614, 31452, 610941, 0b11110100000000000010000111111110}};
s21_decimal second = {
    {1564, 31452, 610941, 0b11110100000000000010000111111110}};
ck_assert_int_eq(s21_is_not_equal(first, second), 1);

#test s21_not_equal_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_2
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000000000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010000000000000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_8
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_16
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_18
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_20
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_21
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_22
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 5.4564654654864768465454654846;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01101110100110100110010101111110;
src2.bits[1] = 0b11100010111000110111110100101010;
src2.bits[2] = 0b10110000010011101101001100001111;
src2.bits[3] = 0b00000000000111000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_32
s21_decimal src1, src2;
int origin;
// src1 = -7.7545545454546589781677545545;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b00000101101101111001100001001001;
src1.bits[1] = 0b01101011011011011010110110010010;
src1.bits[2] = 0b11111010100100000010101111111010;
src1.bits[3] = 0b10000000000111000000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_33
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_36
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_not_equal_37
s21_decimal src1, src2;
int origin;
// src1 = 44073709551615.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b00011010000001000111111111110110;
src1.bits[1] = 0b00000000000000011001000011011001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_38
s21_decimal src1, src2;
int origin;
// src1 = 228162514264337.5935439503;
// src2 = 228162514264337.59354395030000;
src1.bits[0] = 0b01010010111101011100001010001111;
src1.bits[1] = 0b00100101100101100010101000001101;
src1.bits[2] = 0b00000000000000011110001100100111;
src1.bits[3] = 0b00000000000010100000000000000000;
src2.bits[0] = 0b10011111111111111111000111110000;
src2.bits[1] = 0b00111001110010101010100001111000;
src2.bits[2] = 0b01001001101110010010100100101100;
src2.bits[3] = 0b00000000000011100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_39
s21_decimal src1, src2;
int origin;
// src1 = -754554545454658.97816770;
// src2 = -754554545454658.9781677;
src1.bits[0] = 0b00100000101101101001001011000010;
src1.bits[1] = 0b01110010110010011000000011111000;
src1.bits[2] = 0b00000000000000000000111111111010;
src1.bits[3] = 0b10000000000010000000000000000000;
src2.bits[0] = 0b10011100110111110000111010101101;
src2.bits[1] = 0b00001011011110101000110011100101;
src2.bits[2] = 0b00000000000000000000000110011001;
src2.bits[3] = 0b10000000000001110000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_not_equal_40
s21_decimal src1, src2;
int origin;
// src1 = -2.514264337593543;
// src2 = -2.5142643375935430000000000000;
src1.bits[0] = 0b11001000101101101011010011000111;
src1.bits[1] = 0b00000000000010001110111010110101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b01010011100110100110000000000000;
src2.bits[1] = 0b10000010110010001001101110001011;
src2.bits[2] = 0b01010001001111011000000111010100;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_1
s21_decimal first = {{4412, 5675, 1254, 0b10000000000000000000000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b00000000000000000000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 1);

#test s21_less_2
s21_decimal first = {{4412, 5675, 1254, 0b00000000000000000000000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b10000000000000000000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 0);

#test s21_less_3_zero
s21_decimal first = {{0, 0, 0, 0b00000000000000000000000000000000}};
s21_decimal second = {{0, 0, 0, 0b10000000000000000000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 0);

#test s21_less_4_zero
s21_decimal first = {{0, 0, 0, 0b10000000000000000000000000000000}};
s21_decimal second = {{0, 0, 0, 0b00000000000000000000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 0);

#test s21_less_5_len_int_part
s21_decimal first = {{0, 0, 0, 0b10000000000000000000000000000000}};
s21_decimal second = {{0, 0, 0, 0b00000000000000000000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 0);

#test s21_less_6_len_int_part_positive
s21_decimal first = {{4412, 5675, 1254, 0b00000011000000000000000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b00000101000000000000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 0);

#test s21_less_7_len_int_part_negative
s21_decimal first = {{4422, 5515, 9254, 0b10000000000000110000000000000000}};
s21_decimal second = {{6312, 5616, 1844, 0b10000000000001010000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 1);

#test s21_less_8_value_int_part_positive
s21_decimal first = {{4412, 5775, 1254, 0b00000000000001110000000000000000}};
s21_decimal second = {{4412, 5675, 1254, 0b00000000000001110000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 0);

#test s21_less_9_value_fract_part_positive
s21_decimal first = {{4412, 5775, 1254, 0b00000000000010000000000000000000}};
s21_decimal second = {{4412, 5775, 1254, 0b00000000000001110000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 1);

#test s21_less_10_max_int_positive
s21_decimal first = {
    {2147483646, 2147483647, 2147483647, 0b00000000000001110000000000000000}};
s21_decimal second = {
    {2147483647, 2147483647, 2147483647, 0b00000000000001110000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 1);

#test s21_less_11_max_int_negative
s21_decimal first = {
    {2147483647, 2147483647, 2147483647, 0b10000000000001110000000000000000}};
s21_decimal second = {
    {2147483646, 2147483647, 2147483647, 0b10000000000001110000000000000000}};
ck_assert_int_eq(s21_is_less(first, second), 1);

#test s21_less_12
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_13
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_14
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_15
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_16
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_17
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_18
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_19
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_20
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_21
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_22
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_23
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_24
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_25
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_26
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_27
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_28
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_29
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_30
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_31
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_32
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_33
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_34
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_35
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_36
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_37
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_38
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_39
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_40
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_41
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_42
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 5.4564654654864768465454654846;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01101110100110100110010101111110;
src2.bits[1] = 0b11100010111000110111110100101010;
src2.bits[2] = 0b10110000010011101101001100001111;
src2.bits[3] = 0b00000000000111000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_43
s21_decimal src1, src2;
int origin;
// src1 = -7.7545545454546589781677545545;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b00000101101101111001100001001001;
src1.bits[1] = 0b01101011011011011010110110010010;
src1.bits[2] = 0b11111010100100000010101111111010;
src1.bits[3] = 0b10000000000111000000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_44
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_45
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_46
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_47
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_48
s21_decimal src1, src2;
int origin;
// src1 = 44073709551615.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b00011010000001000111111111110110;
src1.bits[1] = 0b00000000000000011001000011011001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_49
s21_decimal src1, src2;
int origin;
// src1 = 228162514264337.5935439503;
// src2 = 228162514264337.59354395030000;
src1.bits[0] = 0b01010010111101011100001010001111;
src1.bits[1] = 0b00100101100101100010101000001101;
src1.bits[2] = 0b00000000000000011110001100100111;
src1.bits[3] = 0b00000000000010100000000000000000;
src2.bits[0] = 0b10011111111111111111000111110000;
src2.bits[1] = 0b00111001110010101010100001111000;
src2.bits[2] = 0b01001001101110010010100100101100;
src2.bits[3] = 0b00000000000011100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_50
s21_decimal src1, src2;
int origin;
// src1 = -754554545454658.97816770;
// src2 = -754554545454658.9781677;
src1.bits[0] = 0b00100000101101101001001011000010;
src1.bits[1] = 0b01110010110010011000000011111000;
src1.bits[2] = 0b00000000000000000000111111111010;
src1.bits[3] = 0b10000000000010000000000000000000;
src2.bits[0] = 0b10011100110111110000111010101101;
src2.bits[1] = 0b00001011011110101000110011100101;
src2.bits[2] = 0b00000000000000000000000110011001;
src2.bits[3] = 0b10000000000001110000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_51
s21_decimal src1, src2;
int origin;
// src1 = -2.514264337593543;
// src2 = -2.514264337593542;
src1.bits[0] = 0b11001000101101101011010011000111;
src1.bits[1] = 0b00000000000010001110111010110101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b11001000101101101011010011000110;
src2.bits[1] = 0b00000000000010001110111010110101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011110000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_52
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = 0;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_2
s21_decimal src1, src2;
int origin;
// src1 = 457;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000111001001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 54;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000110110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_8
s21_decimal src1, src2;
int origin;
// src1 = 3.745754741;
// src2 = 3.222212;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 434345343551615.00000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01000110001111010001100000000000;
src2.bits[1] = 0b11010011010011111110100110011101;
src2.bits[2] = 0b00000000001000111110110110011110;
src2.bits[3] = 0b00000000000010110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_16
s21_decimal src1, src2;
int origin;
// src1 = -796214545.3526545454564545456;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10111111111111101001001110110000;
src1.bits[1] = 0b11101010111111101111100111101000;
src1.bits[2] = 0b00011001101110100010000111100001;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_18
s21_decimal src1, src2;
int origin;
// src1 = -7961327845421.843434341378545;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b11110011001100111010100111110001;
src1.bits[1] = 0b01001011001101011000000011010000;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_20
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 145752736456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b10001101100101011101000110000101;
src2.bits[1] = 0b11000001100101010111000111101011;
src2.bits[2] = 0b00000100101101011010001101101100;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_21
s21_decimal src1, src2;
int origin;
// src1 = 87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_22
s21_decimal src1, src2;
int origin;
// src1 = -854764561465456456.9876545679;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b11000100000001000100000010001111;
src1.bits[1] = 0b01000000100100100110001100010101;
src1.bits[2] = 0b00011011100111100111001001011101;
src1.bits[3] = 0b10000000000010100000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 45645405.456456345684654546548;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01000110110111011101111001110100;
src2.bits[1] = 0b11111110010110110111101101110010;
src2.bits[2] = 0b10010011011111001111111010010011;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_32
s21_decimal src1, src2;
int origin;
// src1 = -776890.75455454213415678965898;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b11000010010111101111100010001010;
src1.bits[1] = 0b01011100000101000111000011011000;
src1.bits[2] = 0b11111011000001101110010110100011;
src1.bits[3] = 0b10000000000101110000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_33
s21_decimal src1, src2;
int origin;
// src1 = -732123534337593543950335.12;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11000011000110111111111110101000;
src1.bits[1] = 0b10100001110111010100101100101110;
src1.bits[2] = 0b00000000001111001000111101010001;
src1.bits[3] = 0b10000000000000100000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_36
s21_decimal src1, src2;
int origin;
// src1 = 123523543453453453.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b01001001011001111111110110000010;
src1.bits[1] = 0b00010001001001000111000000010101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_37
s21_decimal src1, src2;
int origin;
// src1 = 31231232456315.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b11100001001010100010000011001110;
src1.bits[1] = 0b00000000000000010001110000001011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_38
s21_decimal src1, src2;
int origin;
// src1 = 78987543557678337.5935439503;
// src2 = 228162514264337.59354395030000;
src1.bits[0] = 0b00111011110001111000001010001111;
src1.bits[1] = 0b00101001100010100010010001100011;
src1.bits[2] = 0b00000010100011010101111010100001;
src1.bits[3] = 0b00000000000010100000000000000000;
src2.bits[0] = 0b10011111111111111111000111110000;
src2.bits[1] = 0b00111001110010101010100001111000;
src2.bits[2] = 0b01001001101110010010100100101100;
src2.bits[3] = 0b00000000000011100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_39
s21_decimal src1, src2;
int origin;
// src1 = -754567488438.97816770;
// src2 = -754554545454658.9781677;
src1.bits[0] = 0b01011010011001011000011011000010;
src1.bits[1] = 0b00010111001011000011100101001001;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000010000000000000000000;
src2.bits[0] = 0b10011100110111110000111010101101;
src2.bits[1] = 0b00001011011110101000110011100101;
src2.bits[2] = 0b00000000000000000000000110011001;
src2.bits[3] = 0b10000000000001110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_40
s21_decimal src1, src2;
int origin;
// src1 = -2.514475768684753643;
// src2 = -2.514264337593542;
src1.bits[0] = 0b10101100110010000011001011101011;
src1.bits[1] = 0b00100010111001010011011001100011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000100100000000000000000;
src2.bits[0] = 0b11001000101101101011010011000110;
src2.bits[1] = 0b00000000000010001110111010110101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_2
s21_decimal src1, src2;
int origin;
// src1 = 457;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000111001001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 54;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000110110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_8
s21_decimal src1, src2;
int origin;
// src1 = 3.745754741;
// src2 = 3.222212;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 434345343551615.00000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01000110001111010001100000000000;
src2.bits[1] = 0b11010011010011111110100110011101;
src2.bits[2] = 0b00000000001000111110110110011110;
src2.bits[3] = 0b00000000000010110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_16
s21_decimal src1, src2;
int origin;
// src1 = -796214545.3526545454564545456;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10111111111111101001001110110000;
src1.bits[1] = 0b11101010111111101111100111101000;
src1.bits[2] = 0b00011001101110100010000111100001;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_18
s21_decimal src1, src2;
int origin;
// src1 = -7961327845421.843434341378545;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b11110011001100111010100111110001;
src1.bits[1] = 0b01001011001101011000000011010000;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_20
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 145752736456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b10001101100101011101000110000101;
src2.bits[1] = 0b11000001100101010111000111101011;
src2.bits[2] = 0b00000100101101011010001101101100;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_21
s21_decimal src1, src2;
int origin;
// src1 = 87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_22
s21_decimal src1, src2;
int origin;
// src1 = -854764561465456456.9876545679;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b11000100000001000100000010001111;
src1.bits[1] = 0b01000000100100100110001100010101;
src1.bits[2] = 0b00011011100111100111001001011101;
src1.bits[3] = 0b10000000000010100000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 45645405.456456345684654546548;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01000110110111011101111001110100;
src2.bits[1] = 0b11111110010110110111101101110010;
src2.bits[2] = 0b10010011011111001111111010010011;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_32
s21_decimal src1, src2;
int origin;
// src1 = -776890.75455454213415678965898;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b11000010010111101111100010001010;
src1.bits[1] = 0b01011100000101000111000011011000;
src1.bits[2] = 0b11111011000001101110010110100011;
src1.bits[3] = 0b10000000000101110000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_33
s21_decimal src1, src2;
int origin;
// src1 = -732123534337593543950335.12;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11000011000110111111111110101000;
src1.bits[1] = 0b10100001110111010100101100101110;
src1.bits[2] = 0b00000000001111001000111101010001;
src1.bits[3] = 0b10000000000000100000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_36
s21_decimal src1, src2;
int origin;
// src1 = 123523543453453453.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b01001001011001111111110110000010;
src1.bits[1] = 0b00010001001001000111000000010101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_37
s21_decimal src1, src2;
int origin;
// src1 = 31231232456315.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b11100001001010100010000011001110;
src1.bits[1] = 0b00000000000000010001110000001011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_38
s21_decimal src1, src2;
int origin;
// src1 = 78987543557678337.5935439503;
// src2 = 228162514264337.59354395030000;
src1.bits[0] = 0b00111011110001111000001010001111;
src1.bits[1] = 0b00101001100010100010010001100011;
src1.bits[2] = 0b00000010100011010101111010100001;
src1.bits[3] = 0b00000000000010100000000000000000;
src2.bits[0] = 0b10011111111111111111000111110000;
src2.bits[1] = 0b00111001110010101010100001111000;
src2.bits[2] = 0b01001001101110010010100100101100;
src2.bits[3] = 0b00000000000011100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_39
s21_decimal src1, src2;
int origin;
// src1 = -754567488438.97816770;
// src2 = -754554545454658.9781677;
src1.bits[0] = 0b01011010011001011000011011000010;
src1.bits[1] = 0b00010111001011000011100101001001;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000010000000000000000000;
src2.bits[0] = 0b10011100110111110000111010101101;
src2.bits[1] = 0b00001011011110101000110011100101;
src2.bits[2] = 0b00000000000000000000000110011001;
src2.bits[3] = 0b10000000000001110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_40
s21_decimal src1, src2;
int origin;
// src1 = -2.514475768684753643;
// src2 = -2.514264337593542;
src1.bits[0] = 0b10101100110010000011001011101011;
src1.bits[1] = 0b00100010111001010011011001100011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000100100000000000000000;
src2.bits[0] = 0b11001000101101101011010011000110;
src2.bits[1] = 0b00000000000010001110111010110101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_2
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_8
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_16
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_18
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_20
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_21
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_22
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 5.4564654654864768465454654846;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01101110100110100110010101111110;
src2.bits[1] = 0b11100010111000110111110100101010;
src2.bits[2] = 0b10110000010011101101001100001111;
src2.bits[3] = 0b00000000000111000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_32
s21_decimal src1, src2;
int origin;
// src1 = -7.7545545454546589781677545545;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b00000101101101111001100001001001;
src1.bits[1] = 0b01101011011011011010110110010010;
src1.bits[2] = 0b11111010100100000010101111111010;
src1.bits[3] = 0b10000000000111000000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_33
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_36
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_37
s21_decimal src1, src2;
int origin;
// src1 = 44073709551615.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b00011010000001000111111111110110;
src1.bits[1] = 0b00000000000000011001000011011001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_38
s21_decimal src1, src2;
int origin;
// src1 = 228162514264337.5935439503;
// src2 = 228162514264337.59354395030000;
src1.bits[0] = 0b01010010111101011100001010001111;
src1.bits[1] = 0b00100101100101100010101000001101;
src1.bits[2] = 0b00000000000000011110001100100111;
src1.bits[3] = 0b00000000000010100000000000000000;
src2.bits[0] = 0b10011111111111111111000111110000;
src2.bits[1] = 0b00111001110010101010100001111000;
src2.bits[2] = 0b01001001101110010010100100101100;
src2.bits[3] = 0b00000000000011100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_39
s21_decimal src1, src2;
int origin;
// src1 = -754554545454658.97816770;
// src2 = -754554545454658.9781677;
src1.bits[0] = 0b00100000101101101001001011000010;
src1.bits[1] = 0b01110010110010011000000011111000;
src1.bits[2] = 0b00000000000000000000111111111010;
src1.bits[3] = 0b10000000000010000000000000000000;
src2.bits[0] = 0b10011100110111110000111010101101;
src2.bits[1] = 0b00001011011110101000110011100101;
src2.bits[2] = 0b00000000000000000000000110011001;
src2.bits[3] = 0b10000000000001110000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_40
s21_decimal src1, src2;
int origin;
// src1 = -2.514264337593543;
// src2 = -2.514264337593542;
src1.bits[0] = 0b11001000101101101011010011000111;
src1.bits[1] = 0b00000000000010001110111010110101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b11001000101101101011010011000110;
src2.bits[1] = 0b00000000000010001110111010110101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011110000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_truncate_1
s21_decimal src1, origin, result;
// src1 = 2.1234;
src1.bits[0] = 0b00000000000000000101001011110010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001000000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_2
s21_decimal src1, origin, result;
// src1 = 457.000001;
src1.bits[0] = 0b00011011001111010100010001000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = 457;
origin.bits[0] = 0b00000000000000000000000111001001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_3
s21_decimal src1, origin, result;
// src1 = 2.000;
src1.bits[0] = 0b00000000000000000000011111010000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000110000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_4
s21_decimal src1, origin, result;
// src1 = 0.000000000000000000000000000;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_5
s21_decimal src1, origin, result;
// src1 = -3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = -3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_6
s21_decimal src1, origin, result;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_7
s21_decimal src1, origin, result;
// src1 = 2.22221200000001000;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_8
s21_decimal src1, origin, result;
// src1 = 3.745754741;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_9
s21_decimal src1, origin, result;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_10
s21_decimal src1, origin, result;
// src1 = -364748;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = -364748;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_11
s21_decimal src1, origin, result;
// src1 = 987456543210.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 987456543210;
origin.bits[0] = 0b11101000111111110001100111101010;
origin.bits[1] = 0b00000000000000000000000011100101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_12
s21_decimal src1, origin, result;
// src1 = -9878798789.5867800;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
// origin = -9878798789;
origin.bits[0] = 0b01001100110100101000000111000101;
origin.bits[1] = 0b00000000000000000000000000000010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_13
s21_decimal src1, origin, result;
// src1 = 9999999999999999999;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 9999999999999999999;
origin.bits[0] = 0b10001001111001111111111111111111;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_14
s21_decimal src1, origin, result;
// src1 = 18446744073709551615;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 18446744073709551615;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_15
s21_decimal src1, origin, result;
// src1 = 18446744073709551615.0;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 18446744073709551615;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_23
s21_decimal src1, origin, result;
// src1 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_24
s21_decimal src1, origin, result;
// src1 = -69.1234567;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
// origin = -69;
origin.bits[0] = 0b00000000000000000000000001000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_26
s21_decimal src1, origin, result;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_27
s21_decimal src1, origin, result;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_28
s21_decimal src1, origin, result;
// src1 = 665464545;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 665464545;
origin.bits[0] = 0b00100111101010100010111011100001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_29
s21_decimal src1, origin, result;
// src1 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_31
s21_decimal src1, origin, result;
// src1 = 0.5456465465486476846545465485;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_36
s21_decimal src1, origin, result;
// src1 = 123523543453453453.0;
src1.bits[0] = 0b01001001011001111111110110000010;
src1.bits[1] = 0b00010001001001000111000000010101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 123523543453453453;
origin.bits[0] = 0b00100000111100001100110010001101;
origin.bits[1] = 0b00000001101101101101100000000010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_37
s21_decimal src1, origin, result;
// src1 = 31231232456315.0;
src1.bits[0] = 0b11100001001010100010000011001110;
src1.bits[1] = 0b00000000000000010001110000001011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 31231232456315;
origin.bits[0] = 0b10010110100001000011011001111011;
origin.bits[1] = 0b00000000000000000001110001100111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_39
s21_decimal src1, origin, result;
// src1 = -754567488438.97816770;
src1.bits[0] = 0b01011010011001011000011011000010;
src1.bits[1] = 0b00010111001011000011100101001001;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000010000000000000000000;
// origin = -754567488438;
origin.bits[0] = 0b10101111101110100010001110110110;
origin.bits[1] = 0b00000000000000000000000010101111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_40
s21_decimal src1, origin, result;
// src1 = -2.514475768684753643;
src1.bits[0] = 0b10101100110010000011001011101011;
src1.bits[1] = 0b00100010111001010011011001100011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000100100000000000000000;
// origin = -2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_41
s21_decimal src1, origin, result;
// src1 = -0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000010000000000000000;
// origin = -0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_42
s21_decimal src1, origin, result;
// src1 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_truncate_43
s21_decimal src1, origin, result;
// src1 = 754567488438.97816770;
src1.bits[0] = 0b01011010011001011000011011000010;
src1.bits[1] = 0b00010111001011000011100101001001;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b00000000000010000000000000000000;
// origin = 754567488438;
origin.bits[0] = 0b10101111101110100010001110110110;
origin.bits[1] = 0b00000000000000000000000010101111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_truncate(src1, &result);
int check_origin = 0;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_1
s21_decimal src1, origin, result;
// src1 = 2.1234;
src1.bits[0] = 0b00000000000000000101001011110010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001000000000000000000;
// origin = -2.1234;
origin.bits[0] = 0b00000000000000000101001011110010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_2
s21_decimal src1, origin, result;
// src1 = 457.000001;
src1.bits[0] = 0b00011011001111010100010001000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = -457.000001;
origin.bits[0] = 0b00011011001111010100010001000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_3
s21_decimal src1, origin, result;
// src1 = 2.000;
src1.bits[0] = 0b00000000000000000000011111010000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000110000000000000000;
// origin = -2.000;
origin.bits[0] = 0b00000000000000000000011111010000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_4
s21_decimal src1, origin, result;
// src1 = 0.000000000000000000000000000;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
// origin = 0.000000000000000000000000000;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_5
s21_decimal src1, origin, result;
// src1 = -3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_6
s21_decimal src1, origin, result;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = -2.222212;
origin.bits[0] = 0b00000000001000011110100010000100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_7
s21_decimal src1, origin, result;
// src1 = 2.22221200000001000;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
// origin = -2.22221200000001000;
origin.bits[0] = 0b00000111100011111010001111101000;
origin.bits[1] = 0b00000011000101010111110100000001;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000100010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_8
s21_decimal src1, origin, result;
// src1 = 3.745754741;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
// origin = -3.745754741;
origin.bits[0] = 0b11011111010000111010111001110101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000010010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_9
s21_decimal src1, origin, result;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = -2.222212;
origin.bits[0] = 0b00000000001000011110100010000100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_10
s21_decimal src1, origin, result;
// src1 = -364748;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = 364748;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_11
s21_decimal src1, origin, result;
// src1 = 987456543210.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = -987456543210.0;
origin.bits[0] = 0b00011001111101110000001100100100;
origin.bits[1] = 0b00000000000000000000100011111011;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_12
s21_decimal src1, origin, result;
// src1 = -9878798789.5867800;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
// origin = 9878798789.5867800;
origin.bits[0] = 0b11001110100110111101100110011000;
origin.bits[1] = 0b00000001010111101111011100100110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000001110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_13
s21_decimal src1, origin, result;
// src1 = 9999999999999999999;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = -9999999999999999999;
origin.bits[0] = 0b10001001111001111111111111111111;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_14
s21_decimal src1, origin, result;
// src1 = 18446744073709551615;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = -18446744073709551615;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_15
s21_decimal src1, origin, result;
// src1 = 18446744073709551615.0;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = -18446744073709551615.0;
origin.bits[0] = 0b11111111111111111111111111110110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000001001;
origin.bits[3] = 0b10000000000000010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_16
s21_decimal src1, origin, result;
// src1 = -796214545.3526545454564545456;
src1.bits[0] = 0b10111111111111101001001110110000;
src1.bits[1] = 0b11101010111111101111100111101000;
src1.bits[2] = 0b00011001101110100010000111100001;
src1.bits[3] = 0b10000000000100110000000000000000;
// origin = 796214545.3526545454564545456;
origin.bits[0] = 0b10111111111111101001001110110000;
origin.bits[1] = 0b11101010111111101111100111101000;
origin.bits[2] = 0b00011001101110100010000111100001;
origin.bits[3] = 0b00000000000100110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_17
s21_decimal src1, origin, result;
// src1 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
// origin = 545454512454545.35265454545645;
origin.bits[0] = 0b10000010111000100101101011101101;
origin.bits[1] = 0b11111001111010000010010110101101;
origin.bits[2] = 0b10110000001111101111000010010100;
origin.bits[3] = 0b00000000000011100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_18
s21_decimal src1, origin, result;
// src1 = -7961327845421.843434341378545;
src1.bits[0] = 0b11110011001100111010100111110001;
src1.bits[1] = 0b01001011001101011000000011010000;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b10000000000011110000000000000000;
// origin = 7961327845421.843434341378545;
origin.bits[0] = 0b11110011001100111010100111110001;
origin.bits[1] = 0b01001011001101011000000011010000;
origin.bits[2] = 0b00011001101110010111010010111111;
origin.bits[3] = 0b00000000000011110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_19
s21_decimal src1, origin, result;
// src1 = 12345677.987654345678987654346;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
// origin = -12345677.987654345678987654346;
origin.bits[0] = 0b10010001000010101111010011001010;
origin.bits[1] = 0b11000000010001011101010111110010;
origin.bits[2] = 0b00100111111001000001101100000000;
origin.bits[3] = 0b10000000000101010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_20
s21_decimal src1, origin, result;
// src1 = 12345677.987654345678987654346;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
// origin = -12345677.987654345678987654346;
origin.bits[0] = 0b10010001000010101111010011001010;
origin.bits[1] = 0b11000000010001011101010111110010;
origin.bits[2] = 0b00100111111001000001101100000000;
origin.bits[3] = 0b10000000000101010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_21
s21_decimal src1, origin, result;
// src1 = 87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b00000000000100010000000000000000;
// origin = -87654323456.98765456789876530;
origin.bits[0] = 0b10110010000010100010111100110010;
origin.bits[1] = 0b10011001010111000101110110000000;
origin.bits[2] = 0b00011100010100101001100001111111;
origin.bits[3] = 0b10000000000100010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_22
s21_decimal src1, origin, result;
// src1 = -854764561465456456.9876545679;
src1.bits[0] = 0b11000100000001000100000010001111;
src1.bits[1] = 0b01000000100100100110001100010101;
src1.bits[2] = 0b00011011100111100111001001011101;
src1.bits[3] = 0b10000000000010100000000000000000;
// origin = 854764561465456456.9876545679;
origin.bits[0] = 0b11000100000001000100000010001111;
origin.bits[1] = 0b01000000100100100110001100010101;
origin.bits[2] = 0b00011011100111100111001001011101;
origin.bits[3] = 0b00000000000010100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_23
s21_decimal src1, origin, result;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = -79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_24
s21_decimal src1, origin, result;
// src1 = -69.1234567;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
// origin = 69.1234567;
origin.bits[0] = 0b00101001001100110110011100000111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000001110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_25
s21_decimal src1, origin, result;
// src1 = 13436577854.000000000000;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
// origin = -13436577854.000000000000;
origin.bits[0] = 0b00100110011110011110000000000000;
origin.bits[1] = 0b01100101111110011111000000101100;
origin.bits[2] = 0b00000000000000000000001011011000;
origin.bits[3] = 0b10000000000011000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_26
s21_decimal src1, origin, result;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = -79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_27
s21_decimal src1, origin, result;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = -79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);
#test s21_negate_28
s21_decimal src1, origin, result;
// src1 = 665464545;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = -665464545;
origin.bits[0] = 0b00100111101010100010111011100001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_29
s21_decimal src1, origin, result;
// src1 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
// origin = -2.7986531268974139743;
origin.bits[0] = 0b11111110100100001101100101011111;
origin.bits[1] = 0b10000100011001000010000111101000;
origin.bits[2] = 0b00000000000000000000000000000001;
origin.bits[3] = 0b10000000000100110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_30
s21_decimal src1, origin, result;
// src1 = -2156878451.8547640000000000;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
// origin = 2156878451.8547640000000000;
origin.bits[0] = 0b10010011100100010011000000000000;
origin.bits[1] = 0b00100110110100100010010100001001;
origin.bits[2] = 0b00000000000100011101011101011110;
origin.bits[3] = 0b00000000000100000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_31
s21_decimal src1, origin, result;
// src1 = 0.5456465465486476846545465485;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
// origin = -0.5456465465486476846545465485;
origin.bits[0] = 0b00001011000011110111000010001101;
origin.bits[1] = 0b10010110101100000101100101010001;
origin.bits[2] = 0b00010001101000010111101110000001;
origin.bits[3] = 0b10000000000111000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_32
s21_decimal src1, origin, result;
// src1 = -776890.75455454213415678965898;
src1.bits[0] = 0b11000010010111101111100010001010;
src1.bits[1] = 0b01011100000101000111000011011000;
src1.bits[2] = 0b11111011000001101110010110100011;
src1.bits[3] = 0b10000000000101110000000000000000;
// origin = 776890.75455454213415678965898;
origin.bits[0] = 0b11000010010111101111100010001010;
origin.bits[1] = 0b01011100000101000111000011011000;
origin.bits[2] = 0b11111011000001101110010110100011;
origin.bits[3] = 0b00000000000101110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_33
s21_decimal src1, origin, result;
// src1 = -732123534337593543950335.12;
src1.bits[0] = 0b11000011000110111111111110101000;
src1.bits[1] = 0b10100001110111010100101100101110;
src1.bits[2] = 0b00000000001111001000111101010001;
src1.bits[3] = 0b10000000000000100000000000000000;
// origin = 732123534337593543950335.12;
origin.bits[0] = 0b11000011000110111111111110101000;
origin.bits[1] = 0b10100001110111010100101100101110;
origin.bits[2] = 0b00000000001111001000111101010001;
origin.bits[3] = 0b00000000000000100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_34
s21_decimal src1, origin, result;
// src1 = 675432788976.5424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
// origin = -675432788976.5424354657687;
origin.bits[0] = 0b10111110000100011000010110010111;
origin.bits[1] = 0b11011001001111010001001011000110;
origin.bits[2] = 0b00000000000001011001011001001000;
origin.bits[3] = 0b10000000000011010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_35
s21_decimal src1, origin, result;
// src1 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
// origin = 579895323215489956.67897455465;
origin.bits[0] = 0b11100110001001011001001101101001;
origin.bits[1] = 0b00111000110110101110001010110100;
origin.bits[2] = 0b10111011010111111101000100011110;
origin.bits[3] = 0b00000000000010110000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_36
s21_decimal src1, origin, result;
// src1 = 123523543453453453.0;
src1.bits[0] = 0b01001001011001111111110110000010;
src1.bits[1] = 0b00010001001001000111000000010101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = -123523543453453453.0;
origin.bits[0] = 0b01001001011001111111110110000010;
origin.bits[1] = 0b00010001001001000111000000010101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_37
s21_decimal src1, origin, result;
// src1 = 31231232456315.0;
src1.bits[0] = 0b11100001001010100010000011001110;
src1.bits[1] = 0b00000000000000010001110000001011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = -31231232456315.0;
origin.bits[0] = 0b11100001001010100010000011001110;
origin.bits[1] = 0b00000000000000010001110000001011;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000010000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_38
s21_decimal src1, origin, result;
// src1 = 78987543557678337.5935439503;
src1.bits[0] = 0b00111011110001111000001010001111;
src1.bits[1] = 0b00101001100010100010010001100011;
src1.bits[2] = 0b00000010100011010101111010100001;
src1.bits[3] = 0b00000000000010100000000000000000;
// origin = -78987543557678337.5935439503;
origin.bits[0] = 0b00111011110001111000001010001111;
origin.bits[1] = 0b00101001100010100010010001100011;
origin.bits[2] = 0b00000010100011010101111010100001;
origin.bits[3] = 0b10000000000010100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_39
s21_decimal src1, origin, result;
// src1 = -754567488438.97816770;
src1.bits[0] = 0b01011010011001011000011011000010;
src1.bits[1] = 0b00010111001011000011100101001001;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000010000000000000000000;
// origin = 754567488438.97816770;
origin.bits[0] = 0b01011010011001011000011011000010;
origin.bits[1] = 0b00010111001011000011100101001001;
origin.bits[2] = 0b00000000000000000000000000000100;
origin.bits[3] = 0b00000000000010000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_40
s21_decimal src1, origin, result;
// src1 = -2.514475768684753643;
src1.bits[0] = 0b10101100110010000011001011101011;
src1.bits[1] = 0b00100010111001010011011001100011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000100100000000000000000;
// origin = 2.514475768684753643;
origin.bits[0] = 0b10101100110010000011001011101011;
origin.bits[1] = 0b00100010111001010011011001100011;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000100100000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_41
s21_decimal src1, origin, result;
// src1 = -0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000010000000000000000;
// origin = 0.0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_negate_42
s21_decimal src1, origin, result;
// src1 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = -0.0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check_origin = 0;
int check = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_1
s21_decimal src, origin, result;
// src = 5.0;
src.bits[0] = 0b00000000000000000000000000110010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 5;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_2
s21_decimal src, origin, result;
// src = 3.4;
src.bits[0] = 0b00000000000000000000000000100010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_3
s21_decimal src, origin, result;
// src = 0.0;
src.bits[0] = 0b00000000000000000000000000000000;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_4
s21_decimal src, origin, result;
// src = -2.4363463;
src.bits[0] = 0b00000001011100111100000111000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000001110000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_5
s21_decimal src, origin, result;
// src = -0.0;
src.bits[0] = 0b00000000000000000000000000000000;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_6
s21_decimal src, origin, result;
// src = -0.45;
src.bits[0] = 0b00000000000000000000000000101101;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000100000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -1;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_7
s21_decimal src, origin, result;
// src = 652.34631;
src.bits[0] = 0b00000011111000110110011011000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000001010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 652;
origin.bits[0] = 0b00000000000000000000001010001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_8
s21_decimal src, origin, result;
// src = 4.97623323;
src.bits[0] = 0b00011101101010010010000100011011;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000010000000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 4;
origin.bits[0] = 0b00000000000000000000000000000100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_9
s21_decimal src, origin, result;
// src = 65658654.59;
src.bits[0] = 0b10000111010110110010011111110011;
src.bits[1] = 0b00000000000000000000000000000001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000100000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 65658654;
origin.bits[0] = 0b00000011111010011101111100011110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_10
s21_decimal src, origin, result;
// src = -364748.110;
src.bits[0] = 0b00010101101111011001110101001110;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000110000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -364749;
origin.bits[0] = 0b00000000000001011001000011001101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_11
s21_decimal src, origin, result;
// src = 1.9874565432111;
src.bits[0] = 0b01101000011010011010001100101111;
src.bits[1] = 0b00000000000000000001001000010011;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000011010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 1;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_12
s21_decimal src, origin, result;
// src = -98.78798789312;
src.bits[0] = 0b00010110010010101110101011000000;
src.bits[1] = 0b00000000000000000000100011111100;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -99;
origin.bits[0] = 0b00000000000000000000000001100011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_13
s21_decimal src, origin, result;
// src = 999999999999999999911.3;
src.bits[0] = 0b10110010001111111111110010001001;
src.bits[1] = 0b00011001111000001100100110111010;
src.bits[2] = 0b00000000000000000000001000011110;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 999999999999999999911;
origin.bits[0] = 0b11011110100111111111111110100111;
origin.bits[1] = 0b00110101110010011010110111000101;
origin.bits[2] = 0b00000000000000000000000000110110;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_14
s21_decimal src, origin, result;
// src = -545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b10000000000011100000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -545454512454546;
origin.bits[0] = 0b10000110011101001011101110010010;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_15
s21_decimal src, origin, result;
// src = 545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b00000000000011100000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_16
s21_decimal src, origin, result;
// src = 7961327845421.879754123131254;
src.bits[0] = 0b01001110111001000011100101110110;
src.bits[1] = 0b01001011001101011010000111011001;
src.bits[2] = 0b00011001101110010111010010111111;
src.bits[3] = 0b00000000000011110000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 7961327845421;
origin.bits[0] = 0b10100100000111100100000000101101;
origin.bits[1] = 0b00000000000000000000011100111101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_17
s21_decimal src, origin, result;
// src = 12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b00000000000101010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 12345677;
origin.bits[0] = 0b00000000101111000110000101001101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_18
s21_decimal src, origin, result;
// src = -12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b10000000000101010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -12345678;
origin.bits[0] = 0b00000000101111000110000101001110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_19
s21_decimal src, origin, result;
// src = 87654323456.9876545678987653;
src.bits[0] = 0b00010001110011011101000110000101;
src.bits[1] = 0b11110101101111000110111111000000;
src.bits[2] = 0b00000010110101010000111100111111;
src.bits[3] = 0b00000000000100000000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 87654323456;
origin.bits[0] = 0b01101000100110101101010100000000;
origin.bits[1] = 0b00000000000000000000000000010100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_20
s21_decimal src, origin, result;
// src = 336565445454313.859865545;
src.bits[0] = 0b00111110111111000101101111001001;
src.bits[1] = 0b00111111110101011110000010001011;
src.bits[2] = 0b00000000000000000100011101000101;
src.bits[3] = 0b00000000000010010000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 336565445454313;
origin.bits[0] = 0b10111111110100011110100111101001;
origin.bits[1] = 0b00000000000000010011001000011010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_21
s21_decimal src, origin, result;
// src = -15456451234534;
src.bits[0] = 0b10111100010010010000101011100110;
src.bits[1] = 0b00000000000000000000111000001110;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000000000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -15456451234534;
origin.bits[0] = 0b10111100010010010000101011100110;
origin.bits[1] = 0b00000000000000000000111000001110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_22
s21_decimal src, origin, result;
// src = -0.42354543545;
src.bits[0] = 0b11011100100001110000101110111001;
src.bits[1] = 0b00000000000000000000000000001001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = -1;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_23
s21_decimal src, origin, result;
// src = 79228162514264337593543950335;
src.bits[0] = 0b11111111111111111111111111111111;
src.bits[1] = 0b11111111111111111111111111111111;
src.bits[2] = 0b11111111111111111111111111111111;
src.bits[3] = 0b00000000000000000000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_floor_24
s21_decimal src, origin, result;
// src = 2.7986531268974139743;
src.bits[0] = 0b11111110100100001101100101011111;
src.bits[1] = 0b10000100011001000010000111101000;
src.bits[2] = 0b00000000000000000000000000000001;
src.bits[3] = 0b00000000000100110000000000000000;
int check = s21_floor(src, &result);
int check_origin = 0;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_1
s21_decimal src, origin, result;
// src = 5.0;
src.bits[0] = 0b00000000000000000000000000110010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 5;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_2
s21_decimal src, origin, result;
// src = 3.4;
src.bits[0] = 0b00000000000000000000000000100010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_3
s21_decimal src, origin, result;
// src = 0.0;
src.bits[0] = 0b00000000000000000000000000000000;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_4
s21_decimal src, origin, result;
//  src = -2.4363463;
src.bits[0] = 0b00000001011100111100000111000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000001110000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = -2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_5
s21_decimal src, origin, result;
// src = -0.0;
src.bits[0] = 0b00000000000000000000000000000000;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_6
s21_decimal src, origin, result;
// src = -0.45;
src.bits[0] = 0b00000000000000000000000000101101;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000100000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_7
s21_decimal src, origin, result;
// src = 652.34631;
src.bits[0] = 0b00000011111000110110011011000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000001010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 652;
origin.bits[0] = 0b00000000000000000000001010001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_8
s21_decimal src, origin, result;
// src = 4.97623323;
src.bits[0] = 0b00011101101010010010000100011011;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000010000000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 5;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_9
s21_decimal src, origin, result;
// src = 65658654.59;
src.bits[0] = 0b10000111010110110010011111110011;
src.bits[1] = 0b00000000000000000000000000000001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000100000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 65658655;
origin.bits[0] = 0b00000011111010011101111100011111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_10
s21_decimal src, origin, result;
// src = -364748.110;
src.bits[0] = 0b00010101101111011001110101001110;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000110000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = -364748;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_11
s21_decimal src, origin, result;
// src = 1.9874565432111;
src.bits[0] = 0b01101000011010011010001100101111;
src.bits[1] = 0b00000000000000000001001000010011;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000011010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_12
s21_decimal src, origin, result;
// src = -98.78798789312;
src.bits[0] = 0b00010110010010101110101011000000;
src.bits[1] = 0b00000000000000000000100011111100;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = -99;
origin.bits[0] = 0b00000000000000000000000001100011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_13
s21_decimal src, origin, result;
// src = 999999999999999999911.3;
src.bits[0] = 0b10110010001111111111110010001001;
src.bits[1] = 0b00011001111000001100100110111010;
src.bits[2] = 0b00000000000000000000001000011110;
src.bits[3] = 0b00000000000000010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 999999999999999999911;
origin.bits[0] = 0b11011110100111111111111110100111;
origin.bits[1] = 0b00110101110010011010110111000101;
origin.bits[2] = 0b00000000000000000000000000110110;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_14
s21_decimal src, origin, result;
// src = -545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b10000000000011100000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = -545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_15
s21_decimal src, origin, result;
// src = 545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b00000000000011100000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_16
s21_decimal src, origin, result;
// src = 7961327845421.879754123131254;
src.bits[0] = 0b01001110111001000011100101110110;
src.bits[1] = 0b01001011001101011010000111011001;
src.bits[2] = 0b00011001101110010111010010111111;
src.bits[3] = 0b00000000000011110000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 7961327845422;
origin.bits[0] = 0b10100100000111100100000000101110;
origin.bits[1] = 0b00000000000000000000011100111101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_17
s21_decimal src, origin, result;
// src = 12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b00000000000101010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 12345678;
origin.bits[0] = 0b00000000101111000110000101001110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_18
s21_decimal src, origin, result;
// src = -12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b10000000000101010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = -12345678;
origin.bits[0] = 0b00000000101111000110000101001110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_19
s21_decimal src, origin, result;
// src = 87654323456.9876545678987653;
src.bits[0] = 0b00010001110011011101000110000101;
src.bits[1] = 0b11110101101111000110111111000000;
src.bits[2] = 0b00000010110101010000111100111111;
src.bits[3] = 0b00000000000100000000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 87654323457;
origin.bits[0] = 0b01101000100110101101010100000001;
origin.bits[1] = 0b00000000000000000000000000010100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_20
s21_decimal src, origin, result;
// src = 336565445454313.859865545;
src.bits[0] = 0b00111110111111000101101111001001;
src.bits[1] = 0b00111111110101011110000010001011;
src.bits[2] = 0b00000000000000000100011101000101;
src.bits[3] = 0b00000000000010010000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 336565445454314;
origin.bits[0] = 0b10111111110100011110100111101010;
origin.bits[1] = 0b00000000000000010011001000011010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_21
s21_decimal src, origin, result;
// src = -15456451234534;
src.bits[0] = 0b10111100010010010000101011100110;
src.bits[1] = 0b00000000000000000000111000001110;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000000000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = -15456451234534;
origin.bits[0] = 0b10111100010010010000101011100110;
origin.bits[1] = 0b00000000000000000000111000001110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_22
s21_decimal src, origin, result;
// src = -0.42354543545;
src.bits[0] = 0b11011100100001110000101110111001;
src.bits[1] = 0b00000000000000000000000000001001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_23
s21_decimal src, origin, result;
// src = 79228162514264337593543950335;
src.bits[0] = 0b11111111111111111111111111111111;
src.bits[1] = 0b11111111111111111111111111111111;
src.bits[2] = 0b11111111111111111111111111111111;
src.bits[3] = 0b00000000000000000000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_round_24
s21_decimal src, origin, result;
// src = 2.7986531268974139743;
src.bits[0] = 0b11111110100100001101100101011111;
src.bits[1] = 0b10000100011001000010000111101000;
src.bits[2] = 0b00000000000000000000000000000001;
src.bits[3] = 0b00000000000100110000000000000000;
int check = s21_round(src, &result);
int check_origin = 0;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(check, check_origin);

#test s21_mul_testing

s21_decimal num_1, num_2, num_3, num_4, num_5, num_6, res_1, res_2, res_3,
    res_4, res_5, res_6, res_7, dest_1, dest_2, dest_3, dest_4;
/*
 *num_1 = 43567
 */
num_1.bits[0] = 0b00000000000000001010101000101111;
num_1.bits[1] = 0b00000000000000000000000000000000;
num_1.bits[2] = 0b00000000000000000000000000000000;
num_1.bits[3] = 0b00000000000000000000000000000000;
/*
 *num_2 = 0
 */
num_2.bits[0] = 0b00000000000000000000000000000000;
num_2.bits[1] = 0b00000000000000000000000000000000;
num_2.bits[2] = 0b00000000000000000000000000000000;
num_2.bits[3] = 0b00000000000000000000000000000000;
/*
 *num_3 = -347820
 */
num_3.bits[0] = 0b00000000000001010100111010101100;
num_3.bits[1] = 0b00000000000000000000000000000000;
num_3.bits[2] = 0b00000000000000000000000000000000;
num_3.bits[3] = 0b10000000000000000000000000000000;
/*
 *num_4 = 79228162514264337593543950335
 */
num_4.bits[0] = 0b11111111111111111111111111111111;
num_4.bits[1] = 0b11111111111111111111111111111111;
num_4.bits[2] = 0b11111111111111111111111111111111;
num_4.bits[3] = 0b00000000000000000000000000000000;
/* *num_5 = 5378.9812
 */
num_5.bits[0] = 0b00000011001101001100010001110100;
num_5.bits[1] = 0b00000000000000000000000000000000;
num_5.bits[2] = 0b00000000000000000000000000000000;
num_5.bits[3] = 0b00000000000001000000000000000000;
/*
 *num_6 = -9842
 */
num_6.bits[0] = 0b00000000000000000010011001110010;
num_6.bits[1] = 0b00000000000000000000000000000000;
num_6.bits[2] = 0b00000000000000000000000000000000;
num_6.bits[3] = 0b10000000000000000000000000000000;
/* dest_1 = num_1 * num_2 = 0
 *        = num_2 * num_4 = 0
 */
dest_1.bits[0] = 0b00000000000000000000000000000000;
dest_1.bits[1] = 0b00000000000000000000000000000000;
dest_1.bits[2] = 0b00000000000000000000000000000000;
dest_1.bits[3] = 0b00000000000000000000000000000000;
/*
 *dest_2 = num_3 * num_5 = -1870917240.984
 */
dest_2.bits[0] = 0b10011011010110111000100010011000;
dest_2.bits[1] = 0b00000000000000000000000110110011;
dest_2.bits[2] = 0b00000000000000000000000000000000;
dest_2.bits[3] = 0b10000000000000110000000000000000;
/*
 *dest_3 = num_3 * num_6 = 3423244440
 */
dest_3.bits[0] = 0b11001100000010101001000010011000;
dest_3.bits[1] = 0b00000000000000000000000000000000;
dest_3.bits[2] = 0b00000000000000000000000000000000;
dest_3.bits[3] = 0b00000000000000000000000000000000;
/*
 *dest_4 = num_1 * num_1 = 1898083489
 */
dest_4.bits[0] = 0b01110001001000100111010010100001;
dest_4.bits[1] = 0b00000000000000000000000000000000;
dest_4.bits[2] = 0b00000000000000000000000000000000;
dest_4.bits[3] = 0b00000000000000000000000000000000;
int value_1 = s21_mul(num_1, num_2, &res_1);
int value_2 = s21_mul(num_3, num_5, &res_2);
int value_3 = s21_mul(num_2, num_4, &res_3);
int value_4 = s21_mul(num_3, num_6, &res_4);
int value_5 = s21_mul(num_1, num_1, &res_5);
int value_6 = s21_mul(num_4, num_1, &res_6);
int value_7 = s21_mul(num_4, num_3, &res_7);
ck_assert_int_eq(res_1.bits[0], dest_1.bits[0]);
ck_assert_int_eq(res_1.bits[1], dest_1.bits[1]);
ck_assert_int_eq(res_1.bits[2], dest_1.bits[2]);
ck_assert_int_eq(res_1.bits[3], dest_1.bits[3]);

ck_assert_int_eq(value_1, VALUE_OK);
ck_assert_int_eq(res_2.bits[0], dest_2.bits[0]);
ck_assert_int_eq(res_2.bits[1], dest_2.bits[1]);
ck_assert_int_eq(res_2.bits[2], dest_2.bits[2]);
ck_assert_int_eq(res_2.bits[3], dest_2.bits[3]);

ck_assert_int_eq(value_2, VALUE_OK);
ck_assert_int_eq(res_3.bits[0], dest_1.bits[0]);
ck_assert_int_eq(res_3.bits[1], dest_1.bits[1]);
ck_assert_int_eq(res_3.bits[2], dest_1.bits[2]);
ck_assert_int_eq(res_3.bits[3], dest_1.bits[3]);

ck_assert_int_eq(value_3, VALUE_OK);
ck_assert_int_eq(res_4.bits[0], dest_3.bits[0]);
ck_assert_int_eq(res_4.bits[1], dest_3.bits[1]);
ck_assert_int_eq(res_4.bits[2], dest_3.bits[2]);
ck_assert_int_eq(res_4.bits[3], dest_3.bits[3]);

ck_assert_int_eq(value_4, VALUE_OK);
ck_assert_int_eq(res_5.bits[0], dest_4.bits[0]);
ck_assert_int_eq(res_5.bits[1], dest_4.bits[1]);
ck_assert_int_eq(res_5.bits[2], dest_4.bits[2]);
ck_assert_int_eq(res_5.bits[3], dest_4.bits[3]);

ck_assert_int_eq(value_5, VALUE_OK);
ck_assert_int_eq(value_6, VALUE_INF);
ck_assert_int_eq(value_7, VALUE_MINUS_INF);

s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 3;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 6521;
// src2 = 74121;
src1.bits[0] = 0b00000000000000000001100101111001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000010010000110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00011100110011110011101011000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 4;
// src2 = 97623323;
src1.bits[0] = 0b00000000000000000000000000000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000101110100011001110100011011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00010111010001100111010001101100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 65658654;
// src2 = 5;
src1.bits[0] = 0b00000011111010011101111100011110;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00010011100100010101101110010110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 1;
// src2 = 98745654321;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111101101100110001110000110001;
src2.bits[1] = 0b00000000000000000000000000010110;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111101101100110001110000110001;
origin.bits[1] = 0b00000000000000000000000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -9878798789;
// src2 = -3;
src1.bits[0] = 0b01001100110100101000000111000101;
src1.bits[1] = 0b00000000000000000000000000000010;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11100110011101111000010101001111;
origin.bits[1] = 0b00000000000000000000000000000110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001001111001111111111111111111;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 18446744073709551615;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11000110011101000101101010011110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00111001100010111010010101100001;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -545454512454545.35265454545645;
// src2 = 54564654;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b00000011010000001001011100101110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00110000111000101100110101010110;
origin.bits[1] = 0b11011110111001111111001101111011;
origin.bits[2] = 0b01100000001010101111111001001101;
origin.bits[3] = 0b10000000000001100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01110001110011111110010111001111;
origin.bits[1] = 0b01000100010011101101011110011001;
origin.bits[2] = 0b01011110010101101001110000011100;
origin.bits[3] = 0b00000000000011010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 7961327845421.879754123131254;
// src2 = 0;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b00000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b10000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b10000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b00000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 79228162514264337593543950335;
// src2 = -1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 7922816251427554395;
// src2 = 65645646;
src1.bits[0] = 0b01011111000010000000010001011011;
src1.bits[1] = 0b01101101111100110111111101100111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000011111010011010110001001110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01011111001100010111011110111010;
origin.bits[1] = 0b01000100111111001101101110110001;
origin.bits[2] = 0b00000001101011100011011100011110;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11000100010110100111001000111001;
origin.bits[1] = 0b01100100100011011110110011010011;
origin.bits[2] = 0b00000000000001001101011111010011;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -9798956154578676.797564534156;
// src2 = -2156878451.854764;
src1.bits[0] = 0b01010100010000000011110110001100;
src1.bits[1] = 0b10001011010100100000010101011001;
src1.bits[2] = 0b00011111101010011000000110101101;
src1.bits[3] = 0b10000000000011000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10100010001001111101100000001001;
origin.bits[1] = 0b01100011000100011111011101101010;
origin.bits[2] = 0b01000100010010101001011110101001;
origin.bits[3] = 0b00000000000000110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -0.77545545454546589781;
// src2 = 87894515154546456456;
src1.bits[0] = 0b10101100001010000001100001010101;
src1.bits[1] = 0b00110100001010010001111010111100;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000101000000000000000000;
src2.bits[0] = 0b00010011111011011111011110001000;
src2.bits[1] = 0b11000011110010000000101111011001;
src2.bits[2] = 0b00000000000000000000000000000100;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00101100010001000110001011111110;
origin.bits[1] = 0b10001111111010010000010001010010;
origin.bits[2] = 0b11011100001110110011010101110011;
origin.bits[3] = 0b10000000000010010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = -79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 0;
// src2 = -37986322154988653.784354545765;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01001111101101000110000001100101;
src2.bits[1] = 0b01000010001101101011011001100001;
src2.bits[2] = 0b01111010101111011000110010011010;
src2.bits[3] = 0b10000000000011000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 18446744073709551617.0;
// src2 = 87654531534564545456464.98565;
src1.bits[0] = 0b00000000000000000000000000001010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000001010;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000010010000110011001100000101;
src2.bits[1] = 0b10010111000000011011101110000001;
src2.bits[2] = 0b00011100010100101001110011100111;
src2.bits[3] = 0b00000000000001010000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 18446744073709551617.0;
// src2 = -87654531534564545456464.98565;
src1.bits[0] = 0b00000000000000000000000000001010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000001010;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000010010000110011001100000101;
src2.bits[1] = 0b10010111000000011011101110000001;
src2.bits[2] = 0b00011100010100101001110011100111;
src2.bits[3] = 0b10000000000001010000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 2;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 2;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_div_test_21_7
s21_decimal a = {21, 0, 0, 0};
s21_decimal b = {7, 0, 0, 0};
s21_decimal res = {0};

int code = s21_div(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 3);
ck_assert_int_eq(res.bits[1], 0);
ck_assert_int_eq(res.bits[2], 0);
ck_assert_int_eq(res.bits[3], 0);

#test s21_div_test_21_0
s21_decimal a = {21, 0, 0, 0};
s21_decimal b = {0, 0, 0, 0};
s21_decimal res = {0};

int code = s21_div(a, b, &res);

ck_assert_int_eq(code, 3);
ck_assert_int_eq(res.bits[0], 0);
ck_assert_int_eq(res.bits[1], 0);
ck_assert_int_eq(res.bits[2], 0);
ck_assert_int_eq(res.bits[3], 0);

#test s21_div_test_negative_21_7
s21_decimal a = {21, 0, 0, 0x80000000};
s21_decimal b = {7, 0, 0, 0};
s21_decimal res = {0};

int code = s21_div(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 3);
ck_assert_int_eq(res.bits[1], 0);
ck_assert_int_eq(res.bits[2], 0);
ck_assert_int_eq(res.bits[3], 0x80000000);

#test s21_div_test_negative_7_21
s21_decimal a = {21, 0, 0, 0};
s21_decimal b = {7, 0, 0, 0x80000000};
s21_decimal res = {0};

int code = s21_div(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 3);
ck_assert_int_eq(res.bits[1], 0);
ck_assert_int_eq(res.bits[2], 0);
ck_assert_int_eq(res.bits[3], 0x80000000);

#test s21_div_test_negative_7_negative_21
s21_decimal a = {21, 0, 0, 0x80000000};
s21_decimal b = {7, 0, 0, 0x80000000};
s21_decimal res = {0};

int code = s21_div(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 3);
ck_assert_int_eq(res.bits[1], 0);
ck_assert_int_eq(res.bits[2], 0);
ck_assert_int_eq(res.bits[3], 0);

#test s21_div_test_negative_0_7_negative_21
s21_decimal a = {21, 0, 0, 0x80000000};
s21_decimal b = {7, 0, 0, 0x80010000};
s21_decimal res = {0};

int code = s21_div(a, b, &res);

ck_assert_int_eq(code, 0);
ck_assert_int_eq(res.bits[0], 30);
ck_assert_int_eq(res.bits[1], 0);
ck_assert_int_eq(res.bits[2], 0);
ck_assert_int_eq(res.bits[3], 0);

#test s21_mul_1
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_2
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 3;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_3
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_4
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_5
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -0.0;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;

src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;

value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_6
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_7
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 6521;
// src2 = 74121;
src1.bits[0] = 0b00000000000000000001100101111001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000010010000110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00011100110011110011101011000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_8
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 4;
// src2 = 97623323;
src1.bits[0] = 0b00000000000000000000000000000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000101110100011001110100011011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00010111010001100111010001101100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_9
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 65658654;
// src2 = 5;
src1.bits[0] = 0b00000011111010011101111100011110;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00010011100100010101101110010110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_10
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_11
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 1;
// src2 = 98745654321;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111101101100110001110000110001;
src2.bits[1] = 0b00000000000000000000000000010110;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111101101100110001110000110001;
origin.bits[1] = 0b00000000000000000000000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_12
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -9878798789;
// src2 = -3;
src1.bits[0] = 0b01001100110100101000000111000101;
src1.bits[1] = 0b00000000000000000000000000000010;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11100110011101111000010101001111;
origin.bits[1] = 0b00000000000000000000000000000110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_13
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001001111001111111111111111111;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_14
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_15
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11000110011101000101101010011110;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00111001100010111010010101100001;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_16
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -545454512454545.35265454545645;
// src2 = 54564654;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b00000011010000001001011100101110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00110000111000101100110101010110;
origin.bits[1] = 0b11011110111001111111001101111011;
origin.bits[2] = 0b01100000001010101111111001001101;
origin.bits[3] = 0b10000000000001100000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_17
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01110001110011111110010111001111;
origin.bits[1] = 0b01000100010011101101011110011001;
origin.bits[2] = 0b01011110010101101001110000011100;
origin.bits[3] = 0b00000000000011010000000000000000;

ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_18
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7961327845421.879754123131254;
// src2 = 0;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_19
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b00000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_20
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b10000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_21
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b10000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_22
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -12345677.987654345678987654346;
// src2 = -87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b10000000000100000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000001010010011001000011101110;
origin.bits[1] = 0b10101010100001010100111110001111;
origin.bits[2] = 0b00100010111101110101101000011010;
origin.bits[3] = 0b00000000000010100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_23
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_24
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_25
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_26
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = -1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_27
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 7922816251427554395;
// src2 = 65645646;
src1.bits[0] = 0b01011111000010000000010001011011;
src1.bits[1] = 0b01101101111100110111111101100111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000011111010011010110001001110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01011111001100010111011110111010;
origin.bits[1] = 0b01000100111111001101101110110001;
origin.bits[2] = 0b00000001101011100011011100011110;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_28
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11000100010110100111001000111001;
origin.bits[1] = 0b01100100100011011110110011010011;
origin.bits[2] = 0b00000000000001001101011111010011;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_29
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 2.7986531268974139743;
// src2 = 9.979623121254565121244554;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11010100101011100011110110001010;
src2.bits[1] = 0b01110100000101000010011110100011;
src2.bits[2] = 0b00000000000010000100000101000100;
src2.bits[3] = 0b00000000000110000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10001101000001110101110100100111;
origin.bits[1] = 0b10011010100110111011011011010101;
origin.bits[2] = 0b00001001000001100100011000111101;
origin.bits[3] = 0b00000000000110100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_30
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -9798956154578676.797564534156;
// src2 = -2156878451.854764;
src1.bits[0] = 0b01010100010000000011110110001100;
src1.bits[1] = 0b10001011010100100000010101011001;
src1.bits[2] = 0b00011111101010011000000110101101;
src1.bits[3] = 0b10000000000011000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b10100010001001111101100000001001;
origin.bits[1] = 0b01100011000100011111011101101010;
origin.bits[2] = 0b01000100010010101001011110101001;
origin.bits[3] = 0b00000000000000110000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_32
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -0.77545545454546589781;
// src2 = 87894515154546456456;
src1.bits[0] = 0b10101100001010000001100001010101;
src1.bits[1] = 0b00110100001010010001111010111100;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000101000000000000000000;
src2.bits[0] = 0b00010011111011011111011110001000;
src2.bits[1] = 0b11000011110010000000101111011001;
src2.bits[2] = 0b00000000000000000000000000000100;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00101100010001000110001011111110;
origin.bits[1] = 0b10001111111010010000010001010010;
origin.bits[2] = 0b11011100001110110011010101110011;
origin.bits[3] = 0b10000000000010010000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_33
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -79228162514264337593543950335;
// src2 = 1;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_34
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 32323465788987654;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b01011000010000110001100100000110;
src1.bits[1] = 0b00000000011100101101011000000101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00101000111100011000101110011110;
origin.bits[1] = 0b01111100111010110000100110110011;
origin.bits[2] = 0b01000110100010110100011101101011;
origin.bits[3] = 0b00000000000001000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_35
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = -784515454.7989898652154545652;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b10110001001110110100010111110100;
src1.bits[1] = 0b00111000100000111010110010000001;
src1.bits[2] = 0b00011001010110010101110000011000;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b01001011111011100000111001011100;
origin.bits[1] = 0b11011011110011010001111100111100;
origin.bits[2] = 0b10010010111111110111111001100000;
origin.bits[3] = 0b00000000000000100000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_36
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0;
// src2 = -37986322154988653.784354545765;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01001111101101000110000001100101;
src2.bits[1] = 0b01000010001101101011011001100001;
src2.bits[2] = 0b01111010101111011000110010011010;
src2.bits[3] = 0b10000000000011000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_37
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551617.0;
// src2 = 87654531534564545456464.98565;
src1.bits[0] = 0b00000000000000000000000000001010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000001010;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000010010000110011001100000101;
src2.bits[1] = 0b10010111000000011011101110000001;
src2.bits[2] = 0b00011100010100101001110011100111;
src2.bits[3] = 0b00000000000001010000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_38
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 18446744073709551617.0;
// src2 = -87654531534564545456464.98565;
src1.bits[0] = 0b00000000000000000000000000001010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000001010;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000010010000110011001100000101;
src2.bits[1] = 0b10010111000000011011101110000001;
src2.bits[2] = 0b00011100010100101001110011100111;
src2.bits[3] = 0b10000000000001010000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 2;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_39
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 2;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_40
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 1;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_49
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0000 0000 0000 0000 0000 00000 001;
// src2 = 0.01;
src1.bits[0] = 0b00000000000000000000000000000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 2;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_50
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.00000000000000000005;
// src2 = 0.0000000000345;
src1.bits[0] = 0b00000000000000000000000000000101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000101000000000000000000;
src2.bits[0] = 0b00000000000000000000000101011001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000011010000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 2;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_mul_51
s21_decimal src1, src2, origin, result;
int value_type_result, value_type_origin;
// src1 = 0.0000000000000000000000001567;
// src2 = 0.000800090769;
src1.bits[0] = 0b00000000000000000000011000011111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b00101111101100000110101010010001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000011000000000000000000;
value_type_result = s21_mul(src1, src2, &result);
value_type_origin = 0;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000111000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(value_type_result, value_type_origin);

#test s21_div_1
s21_decimal src1, src2, result, origin = {{0, 0, 0, 0}};
// 30064771176
// 3
// 10021590392
src1.bits[0] = 0b00000000000000000000000001101000;
src1.bits[1] = 0b00000000000000000000000000000111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
origin.bits[0] = 0b01010101010101010101010101111000;
origin.bits[1] = 0b00000000000000000000000000000010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test s21_div_2
s21_decimal src1, src2, result;
int a = 32768;
int b = -2;
int res_our_dec = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
int res_origin = -16384;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
s21_from_decimal_to_int(result, &res_our_dec);
ck_assert_int_eq(res_our_dec, res_origin);
ck_assert_int_eq(check, check_origin);

#test s21_div_3
s21_decimal src1, src2, result;
int a = 32768;
int b = 2;
int res_our_dec = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
int res_origin = 16384;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
s21_from_decimal_to_int(result, &res_our_dec);
ck_assert_int_eq(res_our_dec, res_origin);
ck_assert_int_eq(check, check_origin);

#test s21_div_4
s21_decimal src1, src2, result, origin;
// -30064771176
// 2
// 10021590392
src1.bits[0] = 0b00000000000000000000000001101000;
src1.bits[1] = 0b00000000000000000000000000000111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
origin.bits[0] = 0b10000000000000000000000000110100;
origin.bits[1] = 0b00000000000000000000000000000011;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test s21_div_5
s21_decimal src1, src2, result, origin;
// 0
// 0.015
// 0
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000001111;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000110000000000000000;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test s21_div_7
s21_decimal src1, src2, result, origin;
s21_from_int_to_decimal(-101, &src1);
s21_from_float_to_decimal(10.1, &src2);
int check = s21_div(src1, src2, &result);
int check_origin = 0;
origin.bits[0] = 0b00000000000000000000000000001010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test s21_div_8
s21_decimal src1, src2, result;
float a = 1.0 / 0.0;
float b = 1.0 / 0.0;
s21_from_float_to_decimal(a, &src1);
s21_from_float_to_decimal(b, &src2);
int check = s21_div(src1, src2, &result);
int check_origin = 3;
ck_assert_int_eq(check, check_origin);
ck_assert_int_eq(result.bits[3], 0);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 0);

#test s21_div_10
s21_decimal src1, src2, result;
float a = -115.2;
float b = 0.0;
s21_from_float_to_decimal(a, &src1);
s21_from_float_to_decimal(b, &src2);
int check = s21_div(src1, src2, &result);
int check_origin = 3;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 0);

#test s21_div_11
s21_decimal src1, src2, result;
src1.bits[0] = 0x0006BFD0;
src1.bits[1] = 0x00000000;
src1.bits[2] = 0x00000000;
src1.bits[3] = 0x00000000;

src2.bits[0] = 0x00000028;
src2.bits[1] = 0x00000000;
src2.bits[2] = 0x00000000;
src2.bits[3] = 0x00000000;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0x00000000);
ck_assert_int_eq(result.bits[2], 0x00000000);
ck_assert_int_eq(result.bits[1], 0x00000000);
ck_assert_int_eq(result.bits[0], 0x00002B32);

#test s21_div_12
s21_decimal src1, src2, result;
src1.bits[0] = 5;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0;

src2.bits[0] = 10;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 65536);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 5);

#test s21_div_13
s21_decimal src1, src2, result;
src1.bits[0] = 10;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0;

src2.bits[0] = 8;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 131072);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 125);

#test s21_div_14
s21_decimal src1, src2, result;
src1.bits[0] = 10;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0b10000000000000000000000000000000;

src2.bits[0] = 8;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);

#test s21_div_15
s21_decimal src1, src2, result, origin;
src1.bits[0] = 10;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0b10000000000000000000000000000000;

src2.bits[0] = 8;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0b10000000000000000000000000000000;

origin.bits[0] = 125;
origin.bits[1] = 0;
origin.bits[2] = 0;
origin.bits[3] = 131072;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test s21_div_16
s21_decimal src1, src2, result, origin;
src1.bits[0] = 10;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0;

src2.bits[0] = 8;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0b10000000000000000000000000000000;

origin.bits[0] = 125;
origin.bits[1] = 0;
origin.bits[2] = 0;
origin.bits[3] = 0b10000000000000100000000000000000;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], origin.bits[3]);
ck_assert_int_eq(result.bits[2], origin.bits[2]);
ck_assert_int_eq(result.bits[1], origin.bits[1]);
ck_assert_int_eq(result.bits[0], origin.bits[0]);

#test s21_div_17
s21_decimal src1, src2, result;
src1.bits[0] = 5;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0;

src2.bits[0] = 125;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 65536;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 65536);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 4);

#test s21_div_18
s21_decimal src1, src2, result;
src1.bits[0] = 125;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0;

src2.bits[0] = 5;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 65536;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0u);
ck_assert_int_eq(result.bits[2], 0u);
ck_assert_int_eq(result.bits[1], 0u);
ck_assert_int_eq(result.bits[0], 250u);

#test s21_div_19
s21_decimal src1, src2, result;
src1.bits[0] = 5;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 65536;

src2.bits[0] = 2;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 131072);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 25);

#test s21_div_20
s21_decimal src1, src2, result;
src1.bits[0] = 5;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 65536;

src2.bits[0] = 1;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 65536;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0u);
ck_assert_int_eq(result.bits[2], 0u);
ck_assert_int_eq(result.bits[1], 0u);
ck_assert_int_eq(result.bits[0], 5);

#test s21_div_21
s21_decimal src1, src2, result;
src1.bits[0] = 1;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0b10000000000000010000000000000000;

src2.bits[0] = 1;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 65536;

unsigned int origin = 0b10000000000000000000000000000000;
int check = s21_div(src1, src2, &result);
int check_origin = 0;

ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], origin);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 1);

#test s21_div_22
s21_decimal src1, src2, result;
src1.bits[0] = 2585;
src1.bits[1] = 0;
src1.bits[2] = 0;
src1.bits[3] = 0b00000000000000010000000000000000;

src2.bits[0] = 125;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 65536;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0b00000000000000100000000000000000);
ck_assert_int_eq(result.bits[2], 0);
ck_assert_int_eq(result.bits[1], 0);
ck_assert_int_eq(result.bits[0], 2068);

#test s21_div_23
s21_decimal src1, src2, result;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;

src2.bits[0] = 5;
src2.bits[1] = 0;
src2.bits[2] = 0;
src2.bits[3] = 0;

int check = s21_div(src1, src2, &result);
int check_origin = 0;
ck_assert_int_eq(check_origin, check);
ck_assert_int_eq(result.bits[3], 0);
ck_assert_int_eq(result.bits[2], 0b00110011001100110011001100110011);
ck_assert_int_eq(result.bits[1], 0b00110011001100110011001100110011);
ck_assert_int_eq(result.bits[0], 0b00110011001100110011001100110011);

#test s21_mod_1
s21_decimal src1, src2, res_mod;
int a = 3;
int b = 2;
int res_origin = a % b;
int res = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
s21_mod(src1, src2, &res_mod);
s21_from_decimal_to_int(res_mod, &res);
ck_assert_int_eq(res_origin, res);

#test s21_mod_2
s21_decimal src1, src2, res_mod;
int a = -98765;
int b = 1234;
int res_origin = a % b;
int res = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
s21_mod(src1, src2, &res_mod);
s21_from_decimal_to_int(res_mod, &res);
ck_assert_int_eq(res_origin, res);

#test s21_mod_3
s21_decimal src1, src2, res_mod;
int a = 30198;
int b = 20210;
int res_origin = a % b;
int res = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
s21_mod(src1, src2, &res_mod);
s21_from_decimal_to_int(res_mod, &res);
ck_assert_int_eq(res_origin, res);

#test s21_mod_4
s21_decimal src1, src2, res_mod;
int a = -98765;
int b = -1234;
int res_origin = a % b;
int res = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
s21_mod(src1, src2, &res_mod);
s21_from_decimal_to_int(res_mod, &res);
ck_assert_int_eq(res_origin, res);

#test s21_mod_5
s21_decimal src1, src2, res_mod;
int a = 98765;
int b = 127234;
int res_origin = a % b;
int res = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
s21_mod(src1, src2, &res_mod);
s21_from_decimal_to_int(res_mod, &res);
ck_assert_int_eq(res_origin, res);

#test s21_mod_6
s21_decimal src1, src2, res_mod;
int a = 342576;
int b = 1542134;
int res_origin = a % b;
int res = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
s21_mod(src1, src2, &res_mod);
s21_from_decimal_to_int(res_mod, &res);
ck_assert_int_eq(res_origin, res);

#test s21_mod_7
s21_decimal src1, src2, res_mod;
int a = 12;
int b = 0;
s21_from_int_to_decimal(a, &src1);
s21_from_int_to_decimal(b, &src2);
int check = s21_mod(src1, src2, &res_mod);
ck_assert_int_eq(check, 3);

#test s21_mod_8
s21_decimal src1, src2, res_mod;
int a = 12;
float b = 0.0000;
s21_from_int_to_decimal(a, &src1);
s21_from_float_to_decimal(b, &src2);
int check = s21_mod(src1, src2, &res_mod);
ck_assert_int_eq(check, 3);

#test s21_mod_9
s21_decimal src1, src2, res_mod;

src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;

src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;

int check = s21_mod(src1, src2, &res_mod);
ck_assert_int_eq(check, 0);
ck_assert_int_eq(res_mod.bits[0], 1);
